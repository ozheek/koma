var SHEET_FINANCE = "–°–∫–∞—Ä–±–Ω–∏—Ü—è";

/* –ú–ï–ù–Æ */
var FINANCE = "üíµ –§—ñ–Ω–∞–Ω—Å–∏";
var FINANCE_IN = "–û—Ç—Ä–∏–º–∞–ª–∏ –∫–æ—à—Ç–∏";
var FINANCE_OUT = "–í–∏—Ç—Ä–∞—Ç–∏–ª–∏ –∫–æ—à—Ç–∏";
var FINANCE_TRANSFER = "–ü–µ—Ä–µ–¥–∞—Ç–∏ –∫–æ—à—Ç–∏";
var FINANCE_BALANCE = "–ü–æ–∫–∞–∑–∞—Ç–∏ –±–∞–ª–∞–Ω—Å";

/* –°–ü–ò–°–ö–ò */
var FINANCE_LISTS_TYPE = '–¢–∏–ø–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π'
var FINANCE_LISTS_TYPE_TRANSFER = "–ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ—à—Ç—ñ–≤";
var FINANCE_LISTS_TYPE_MEMBERSHIP = "–ß–ª–µ–Ω—Å—Ç–≤–æ";
var FINANCE_LISTS_TYPE_MEMBERSHIP_TM = "–ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –¢–ú";
var FINANCE_LISTS_TYPE_LIBRARY = "–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞";

/* –ó–ê–ì–û–õ–û–í–ö–ò –ë–ê–ó–ò –î–ê–ù–ù–ò–• */
var FINANCE_HEADER_DATE = "–î–∞—Ç–∞";
var FINANCE_HEADER_TYPE = "–¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó";
var FINANCE_HEADER_DESCRIPTION = "–û–ø–∏—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó";
var FINANCE_HEADER_MEMBER = "–ß–ª–µ–Ω –∫–ª—É–±—É";
var FINANCE_HEADER_PROCESSED_BY = "–•—Ç–æ –ø—Ä–æ–≤—ñ–≤ –æ–ø–µ—Ä–∞—Ü—ñ—é";
var FINANCE_HEADER_AMOUNT = "–°—É–º–∞ (–≥—Ä–Ω)";

/* –¢–ï–ö–°–¢–ò */
var FINANCE_NO_DESCRIPTION = "–û–ø–∏—Å—É –Ω–µ–º–∞—î";

var FINANCE_WRONG_AMOUNT = "–í–≤–µ–¥–µ–Ω–∞ –≤–∞–º–∏ —Å—É–º–∞ '{0}' –Ω–µ —î —á–∏—Å–ª–æ–º, –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É —â–µ —Ä–∞–∑:";

var FINANCE_TRANSFER_DESCRIPTION = '–ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ—à—Ç–∏ –≤—ñ–¥ —á–ª–µ–Ω–∞ –∫–ª—É–±—É {0} —á–ª–µ–Ω—É –∫–ª—É–±–∞ {1}';
var FINANCE_TRANSFER_SUCCESS = '–î—è–∫—É—é, –∑–∞–ø–∏—Å–∞–≤, —â–æ –≤–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ {0}–≥—Ä–Ω {1}! üòç';
var FINANCE_TRANSFER_AMOUNT = '–Ø–∫—É —Å—É–º—É (–≥—Ä–Ω) –≤–∏ –ø–µ—Ä–µ–¥–∞—î—Ç–µ {0}?';
var FINANCE_TRANSFER_START = '–û–±–µ—Ä—ñ—Ç—å —á–ª–µ–Ω–∞ –∫–ª—É–±—É (–∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –¥–ª—è –ø–æ—à—É–∫—É), —è–∫–æ–º—É –≤–∏ –ø–µ—Ä–µ–¥–∞—î—Ç–µ –∫–æ—à—Ç–∏?';

var FINANCE_OUT_TM_SUCCESS = '–î—è–∫—É—é, –∑–∞–ø–∏—Å–∞–≤, —â–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ —Å–ø–ª–∞—Ç—É –≤ –¢–ú {0}–≥—Ä–Ω –∑–∞ {1}! üòâ';
var FINANCE_OUT_TM_AMOUNT = '–Ø–∫–∞ —Å—É–º–∞ (–≥—Ä–Ω) —Å–ø–ª–∞—á–µ–Ω–∞ –≤ –¢–ú –∑–∞ {0}?';

var FINANCE_OUT_SUCCESS = '–î—è–∫—É—é, –∑–∞–ø–∏—Å–∞–≤, —â–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ {0}–≥—Ä–Ω –Ω–∞ {1}! üòâ';
var FINANCE_OUT_AMOUNT = '–Ø–∫–∞ —Å—É–º–∞ (–≥—Ä–Ω)?';
var FINANCE_OUT_MEMBERSHIP = '–û–±–µ—Ä—ñ—Ç—å —á–ª–µ–Ω–∞ –∫–ª—É–±—É (–∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –¥–ª—è –ø–æ—à—É–∫—É), –∑–∞ —è–∫–æ–≥–æ —Å–ø–ª–∞—á–µ–Ω–æ —á–ª–µ–Ω—Å—å–∫–∏–π –≤–Ω–µ—Å–æ–∫?';
var FINANCE_OUT_DESCRIPTION = '–í–∫–∞–∂—ñ—Ç—å –æ–ø–∏—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω:';
var FINANCE_OUT_START= '–ù–∞ —â–æ –±—É–ª–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –≥—Ä–æ—à—ñ (–≤–∏–±–µ—Ä—ñ—Ç—å –∑ –º–µ–Ω—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç)?';

var FINANCE_IN_MEMBERSHIP_TM_SUCCESS = '–î—è–∫—É—é, –∑–∞–ø–∏—Å–∞–≤, —â–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —á–ª–µ–Ω—Å—å–∫–∏–π –≤–Ω–µ—Å–æ–∫ {0}–≥—Ä–Ω –≤—ñ–¥ {1}! üòâ';
var FINANCE_IN_MEMBERSHIP_SUCCESS = '–î—è–∫—É—é, –∑–∞–ø–∏—Å–∞–≤, —â–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —á–ª–µ–Ω—Å—å–∫–∏–π –≤–Ω–µ—Å–æ–∫ {0}–≥—Ä–Ω –≤—ñ–¥ {1}! <b>–ß–ª–µ–Ω—Å—Ç–≤–æ</b> –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ –Ω–∞ <b>{2} –º—ñ—Å. —ñ –¥—ñ–π—Å–Ω–µ –¥–æ {3}</b>. üòâ';
var FINANCE_IN_SUCCESS = '–î—è–∫—É—é, –∑–∞–ø–∏—Å–∞–≤, —â–æ –æ—Ç—Ä–∏–º–∞–Ω–æ {0}–≥—Ä–Ω –∑–∞ {1}! üòâ';
var FINANCE_IN_AMOUNT = '–Ø–∫–∞ —Å—É–º–∞ (–≥—Ä–Ω)?';
var FINANCE_IN_MEMBERSHIP = '–û–±–µ—Ä—ñ—Ç—å —á–ª–µ–Ω–∞ –∫–ª—É–±—É (–∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –¥–ª—è –ø–æ—à—É–∫—É), —â–æ —Å–ø–ª–∞—Ç–∏–≤ —á–ª–µ–Ω—Å—å–∫–∏–π –≤–Ω–µ—Å–æ–∫?';
var FINANCE_IN_DESCRIPTION = '–í–∫–∞–∂—ñ—Ç—å –æ–ø–∏—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω:';
var FINANCE_IN_START = '–ó–∞ —â–æ –±—É–ª–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –≥—Ä–æ—à—ñ (–≤–∏–±–µ—Ä—ñ—Ç—å –∑ –º–µ–Ω—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç)?';

var FINANCE_BALANCE_TITLE = "üí∞ <b>–í –∫–æ–≥–æ –≥—Ä–æ—à—ñ –∫–ª—É–±—É:</b>\n\n";
var FINANCE_BALANCE_TOTAL = '\n<b>–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> {0}–≥—Ä–Ω';
var FINANCE_BALANCE_RECORD = '<b>{0}:</b> {1}–≥—Ä–Ω\n';

var FINANCE_IN_MEMBERSHIP_NOT_ENOUGH_MONEY = "‚ö†Ô∏è –í–∏–±–∞—á—Ç–µ, –∞–ª–µ –ø–æ—Ç—Äi–±–Ω–æ –¥–æ–¥–∞—Ç–∏ <b>{0}–≥—Ä–Ω</b>, —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ —á–ª–µ–Ω—Å—Ç–≤–æ —Ö–æ—á–∞ –± –∑–∞ –æ–¥–∏–Ω –ºi—Å—è—Ü—å!";
var FINANCE_IN_MEMBERSHIP_PAID_EXTRA_MONEY = "‚ö†Ô∏è –í–∏–±–∞—á—Ç–µ, –∞–ª–µ –ø–æ—Ç—Äi–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ —Å—É–º—É, —â–æ –∫—Ä–∞—Ç–Ω–∞ –ºi—Å—è—á–Ω–æ–º—É —á–ª–µ–Ω—Å—å–∫–æ–º—É –≤–Ω–µ—Å–∫—É (<b>{0}–≥—Ä–Ω</b>)!\
                                      \n\n–ó–º–µ–Ω—ài—Ç—å —Å—É–º—É –Ω–∞ <b>{1}–≥—Ä–Ω</b>, —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞ <b>{2} –ºi—Å—è—Ü—å(-i–≤)</b>, –∞–±–æ –∑–±i–ª—å—ài—Ç—å –Ω–∞ <b>{3}–≥—Ä–Ω</b>, —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞ <b>{4} –ºi—Å—è—Üi(-–≤)</b>!";   

var FINANCE_TREASURER_MESSAGE_TITLE = 'üí∞ <b>–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–æ —Å–∫–∞—Ä–±–Ω–∏—á—Ü—ñ</b>\n\n';
var FINANCE_TRANSFER_TREASURER_MESSAGE = FINANCE_TREASURER_MESSAGE_TITLE + '{0} –ø–µ—Ä–µ–¥–∞–≤(-–ª–∞) {1}–≥—Ä–Ω {2}.';
var FINANCE_OUT_MEMBERSHIP_TM_TREASURER_MESSAGE = FINANCE_TREASURER_MESSAGE_TITLE + '{0} –≤–∏—Ç—Ä–∞—Ç–∏–≤(-–ª–∞) –Ω–∞ —Å–ø–ª–∞—Ç—É –≤ –¢–ú {1}–≥—Ä–Ω –∑–∞ {2}.';
var FINANCE_OUT_MEMBERSHIP_MESSAGE = FINANCE_TREASURER_MESSAGE_TITLE + '{0} –≤–∏—Ç—Ä–∞—Ç–∏–≤(-–ª–∞) –Ω–∞ —á–ª–µ–Ω—Å—å–∫–∏–π –≤–Ω–µ—Å–æ–∫ {1}–≥—Ä–Ω –∑–∞ {2}.';
var FINANCE_OUT_TREASURER_MESSAGE = FINANCE_TREASURER_MESSAGE_TITLE + '{0} –≤–∏—Ç—Ä–∞—Ç–∏–≤(-–ª–∞) {1}–≥—Ä–Ω –Ω–∞ {2}{3}.';
var FINANCE_IN_MEMBERSHIP_TM_TREASURER_MESSAGE = FINANCE_TREASURER_MESSAGE_TITLE + '–û—Ç—Ä–∏–º–∞–Ω–æ —á–ª–µ–Ω—Å—å–∫–∏–π –≤–Ω–µ—Å–æ–∫ –∑–∞ –¢–ú, —É —Ä–æ–∑–º—ñ—Ä—ñ {0}–≥—Ä–Ω –≤—ñ–¥ {1}.';
var FINANCE_IN_MEMBERSHIP_TREASURER_MESSAGE = FINANCE_TREASURER_MESSAGE_TITLE + '–û—Ç—Ä–∏–º–∞–Ω–æ —á–ª–µ–Ω—Å—å–∫–∏–π –≤–Ω–µ—Å–æ–∫ {0}–≥—Ä–Ω –≤—ñ–¥ {1}.';
var FINANCE_IN_TREASURER_MESSAGE = FINANCE_TREASURER_MESSAGE_TITLE + '{0} –æ—Ç—Ä–∏–º–∞–≤(-–ª–∞) {1}–≥—Ä–Ω –∑–∞ {2} {3}.';


                                   
var FINANCE_MEMBERSHIP_TREASURER_NOTIFICATION = FINANCE_TREASURER_MESSAGE_TITLE + '‚åõ <b>–¢–∞–∫–∏–º —á–ª–µ–Ω–∞–º –∫–ª—É–±—É –Ω–µ–æ–±—Öi–¥–Ω–æ —Å–ø–ª–∞—Ç–∏—Ç–∏ –≤–Ω–µ—Å–∫–∏:</b>\n\n{0}\
                                                         \n\n‚ùå <b>–ß–ª–µ–Ω–∏ –∫–ª—É–±—É, —è–∫i –±—É–ª–∏ –ø–æ–∑–±–∞–≤–ª–µ–Ωi —á–ª–µ–Ω—Å—Ç–≤–∞ –∑–∞ –Ω–µ—Å–ø–ª–∞—Ç—É –≤–Ω–µ—Å–∫i–≤:</b>\n\n{1}\
                                                         \n\nüòè <b>–ß–ª–µ–Ω–∏ –∫–ª—É–±—É, —â–æ –≤–∏—è–≤–∏–ª–∏ –±–∞–∂–∞–Ω–Ω—è —Å–ø–ª–∞—Ç–∏—Ç–∏ —á–ª–µ–Ω—Å—å–∫—ñ –≤–Ω–µ—Å–∫–∏, –ø—Ä–æ—Ç–µ —â–µ –Ω–µ —Å–ø–ª–∞—Ç–∏–ª–∏:</b>\n\n{2}';
                                                         
var FINANCE_MEMBERSHIP_EXPIRED_MEMBER_NOTIFICATION = '–íi—Ç–∞—é, {0}!\n\n–ù–∞–≥–∞–¥—É—é, —â–æ —É –≤–∞—Å –∑–∞–∫—ñ–Ω—á–∏–ª–æ—Å—å —á–ª–µ–Ω—Å—Ç–≤–æ —É –Ω–∞—à–æ–º—É –∫–ª—É–±—ñ üòî\
                                                      \n\n–ó–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞—à–∏–º —Å–∫–∞—Ä–±–Ω–∏–∫–æ–º <b>{1}</b> (@{2}), —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —á–ª–µ–Ω—Å—Ç–≤–æ.\
                                                      \n\n–Ø–∫—â–æ –≤–∏ –Ω–µ –±–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ —á–ª–µ–Ω—Å—Ç–≤–æ —ñ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø—Ä–æ —Ü–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá';
var FINANCE_MEMBERSHIP_GUEST_NOTIFICATION = '–íi—Ç–∞—é, {0}!\n\n–¶–µ –º–∞–ª–µ–Ω—å–∫–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —â–æ –º–∏ –æ—á—ñ–∫—É—î–º–æ –≤—ñ–¥ –≤–∞—Å —á–ª–µ–Ω—Å—å–∫–∏—Ö –≤–Ω–µ—Å–∫—ñ–≤ ‚ò∫\
                                             \n\n–ó–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞—à–∏–º —Å–∫–∞—Ä–±–Ω–∏–∫–æ–º <b>{1}</b> (@{2}), —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —á–ª–µ–Ω—Å—Ç–≤–æ ‚ò∫.\
                                             \n\n–Ø–∫—â–æ —É –≤–∞—Å –∑–º—ñ–Ω–∏–ª–∏—Å—å –ø–ª–∞–Ω–∏ —ñ –≤–∏ –Ω–µ –±–∞–∂–∞—î—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá';
var FINANCE_MEMBERSHIP_REMOVED_NOTIFICATION = '–íi—Ç–∞—é, {0}!\n\n–ù–∞ –∂–∞–ª—å, –≤–∏ –Ω–µ –ø—Ä–æ–¥–æ–≤–∂–∏–ª–∏ —á–ª–µ–Ω—Å—Ç–≤–æ —ñ –π–æ–≥–æ –±—É–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –ø–µ–≤–Ω–∏–π —á–∞—Å üòî\
                                               \n\n–ó–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞—à–∏–º —Å–∫–∞—Ä–±–Ω–∏–∫–æ–º <b>{1}</b> (@{2}), —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —á–ª–µ–Ω—Å—Ç–≤–æ ‚ò∫';



function showBalancesByMembers(userTelegramId) {
    var balances = getBalancesByMembers();
    var html = FINANCE_BALANCE_TITLE;
    var total = 0;
    for (var key in balances) {
        var balance = balances[key];
        total += 1 * balance;
        if (balance != 0) {
          html += format(FINANCE_BALANCE_RECORD, key, balance);
        }
    }

    html += format(FINANCE_BALANCE_TOTAL, total);

    showMenu(userTelegramId, html);
}

function processFinance(userData, text) {
    if (userData.statuses[2]) {
        if (userData.statuses[2] == FINANCE_TRANSFER) {
            if (userData.statuses[3]) {
                if (!userData.statuses[4]) {
                  if(!isNaN(text)) {
                    var description = format(FINANCE_TRANSFER_DESCRIPTION, userData.fullName ,userData.statuses[3]);
                    insertFinanceData(FINANCE_LISTS_TYPE_TRANSFER, userData.statuses[3], -1 * text, userData.fullName, description);
                    insertFinanceData(FINANCE_LISTS_TYPE_TRANSFER, userData.fullName, text, userData.statuses[3], description);
                    showMenu(userData.telegramId, format(FINANCE_TRANSFER_SUCCESS,text , userData.statuses[3]));
                    sendMessageToOfficer(OFFICER_POSITION_TREASURE, format(FINANCE_TRANSFER_TREASURER_MESSAGE, userData.fullName, text, userData.statuses[3]));
                    return true;
                  }
                  else {
                    showMenu(userData.telegramId, format(FINANCE_WRONG_AMOUNT, text));
                    return false;
                  }
                }
            } else {
                  return searchMemberInDatabase(text, userData.telegramId, format(FINANCE_TRANSFER_AMOUNT, text), null);
            }
        } else if (userData.statuses[2] == FINANCE_OUT) {
            if (userData.statuses[3]) {
                if (userData.statuses[3] == FINANCE_LISTS_TYPE_MEMBERSHIP_TM || userData.statuses[3] == FINANCE_LISTS_TYPE_MEMBERSHIP) {
                    if (userData.statuses[4]) {
                      if (!userData.statuses[5]) {
                        if(!isNaN(text)) {
                          // ADD DEBIT BALANCE RECORD
                          var description = '';
                          insertFinanceData(FINANCE_LISTS_TYPE_MEMBERSHIP_TM, userData.statuses[4], -1 * text, userData.fullName, description);
                          sendMessageToOfficer(OFFICER_POSITION_TREASURE, format(FINANCE_OUT_MEMBERSHIP_TM_TREASURER_MESSAGE, userData.fullName, text, userData.statuses[4]));
                          showMenu(userData.telegramId, format(FINANCE_OUT_TM_SUCCESS, text, userData.statuses[4]));s                          
                          return true;
                        }
                        else {
                          showMenu(userData.telegramId, format(FINANCE_WRONG_AMOUNT, text));
                          return false;
                        }
                      }
                    } else {
                        return searchMemberInDatabase(text, userData.telegramId, format(FINANCE_OUT_TM_AMOUNT, text), null);
                    }
                } else {
                    if (userData.statuses[4]) {
                      if (!userData.statuses[5]) {
                        if(!isNaN(text)) {
                          // ADD DEBIT BALANCE RECORD
                          var description = userData.statuses[4] == FINANCE_NO_DESCRIPTION ? '' : userData.statuses[4];
                          insertFinanceData(userData.statuses[3], null, -1 * text, userData.fullName, description);
                          showMenu(userData.telegramId, format(FINANCE_OUT_SUCCESS, text, userData.statuses[3]));
                          var descriptionMessage = !description ? '' : format(' ({0})', description);
                          sendMessageToOfficer(OFFICER_POSITION_TREASURE, format(FINANCE_OUT_TREASURER_MESSAGE, userData.fullName, text, userData.statuses[4], descriptionMessage));
                          //showParentManagementMenu(userData);
                          return true;
                        }
                        else {
                          showMenu(userData.telegramId, format(FINANCE_WRONG_AMOUNT, text));
                          return false;
                        }
                      }
                    } else {
                        showMenu(userData.telegramId, FINANCE_OUT_AMOUNT);
                        return true;
                    }

                }
            } else {
                if (text == FINANCE_LISTS_TYPE_MEMBERSHIP || text == FINANCE_LISTS_TYPE_MEMBERSHIP_TM) {
                    showMenu(userData.telegramId, FINANCE_OUT_MEMBERSHIP, getAllMembers());
                    return true;
                } else {
                    showMenu(userData.telegramId, FINANCE_OUT_DESCRIPTION, [FINANCE_NO_DESCRIPTION]);
                    return true;
                }
            }
        } else if (userData.statuses[2] == FINANCE_IN) {
            if (userData.statuses[3]) {
                if (userData.statuses[3] == FINANCE_LISTS_TYPE_MEMBERSHIP_TM || userData.statuses[3] == FINANCE_LISTS_TYPE_MEMBERSHIP) {
                    if (userData.statuses[4]) {
                      if (!userData.statuses[5]) {
                        if(!isNaN(text)) {
                          var paymentSuccessfull = processPaymentMembership(userData, text);
                          
                          if (paymentSuccessfull) { 
//                          var description = '';
//                          
//                          insertFinanceData(userData.statuses[3], userData.statuses[4], text, userData.fullName, description);
//                          var program = userData.statuses[3] == FINANCE_LISTS_TYPE_MEMBERSHIP_TM ? MEMBERS_PROGRAM_TOASTMASTERS : MEMBERS_PROGRAM_KOMA;
//                          updateMemberInfo(MEMBERS_HEADER_FULLNAME, userData.statuses[4], MEMBERS_HEADER_PROGRAM, program);         
//                          updateMemberInfo(MEMBERS_HEADER_FULLNAME, userData.statuses[4], MEMBERS_HEADER_STATUS, MEMBERS_STATUS_MEMBER);                 
//                          showMenu(userData.telegramId, format(FINANCE_IN_SUCCESS, text, userData.statuses[3]));
                          
                            if (userData.statuses[3] == FINANCE_LISTS_TYPE_MEMBERSHIP_TM) {
                              sendMessageToOfficer(OFFICER_POSITION_TREASURE, format(FINANCE_IN_MEMBERSHIP_TM_TREASURER_MESSAGE, text, userData.statuses[4]));                              
                            } else {
                              sendMessageToOfficer(OFFICER_POSITION_TREASURE, format(FINANCE_IN_MEMBERSHIP_TREASURER_MESSAGE, text, userData.statuses[4]));
                            }
                            return true;
                          }
                          return false;
                        }
                        else {
                          showMenu(userData.telegramId, format(FINANCE_WRONG_AMOUNT, text));
                          return false;
                        }
                      }
                    } else {
                       return searchMemberInDatabase(text, userData.telegramId, format(FINANCE_IN_AMOUNT, text), null);
                    }
                } else {
                    if (userData.statuses[4]) {
                      if (!userData.statuses[5]) {
                        if(!isNaN(text)) {
                          // ADD CREDIT BALANCE RECORD      
                          var description = userData.statuses[4] == FINANCE_NO_DESCRIPTION ? '' : userData.statuses[4];
                          insertFinanceData(userData.statuses[3], null, text, userData.fullName, description);
                          showMenu(userData.telegramId, format(FINANCE_IN_SUCCESS, text, userData.statuses[3]));
                          var descriptionMessage = !description ? '' : format(' ({0})', description);
                          sendMessageToOfficer(OFFICER_POSITION_TREASURE, format(FINANCE_IN_TREASURER_MESSAGE, userData.fullName, text, userData.statuses[3], descriptionMessage));
                          return true;
                        }
                        else {
                          showMenu(userData.telegramId, format(FINANCE_WRONG_AMOUNT, text));
                          return false;
                        }
                      }
                    } else {
                        showMenu(userData.telegramId, FINANCE_IN_AMOUNT);
                        return true;
                    }

                }
            } else {
                if (text == FINANCE_LISTS_TYPE_MEMBERSHIP || text == FINANCE_LISTS_TYPE_MEMBERSHIP_TM) {
                    showMenu(userData.telegramId, FINANCE_IN_MEMBERSHIP, getAllMembers());
                    return true;
                } else {
                    showMenu(userData.telegramId, FINANCE_IN_DESCRIPTION, [FINANCE_NO_DESCRIPTION]);
                    return true;
                }
            }
        }
    } else {
        if (text == FINANCE_BALANCE) {
            showBalancesByMembers(userData.telegramId);
            return true;
        } else if (text == FINANCE_OUT) {            
            showMenu(userData.telegramId, FINANCE_OUT_START, getFinanceTypes());
            return true;
        } else if (text == FINANCE_IN) {
            showMenu(userData.telegramId, FINANCE_IN_START, getFinanceTypes());
            return true;
        } else if (text == FINANCE_TRANSFER) {
            showMenu(userData.telegramId, FINANCE_TRANSFER_START,
                getAllMembers());
            return true;
        }
    }
}

function processPaymentMembership(userData, paidAmount) {
  var program, fee;
  
  if (userData.statuses[3] == FINANCE_LISTS_TYPE_MEMBERSHIP_TM) {
    program = MEMBERS_PROGRAM_TOASTMASTERS;
    fee = MONTHLY_MEMBERSHIP_FEE_TM;
  } else {
    program = MEMBERS_PROGRAM_KOMA;
    fee = MONTHLY_MEMBERSHIP_FEE;
  }
  
  if (+paidAmount < +fee) {
    var shortage = fee - paidAmount;
    sendText(userData.telegramId, format(FINANCE_IN_MEMBERSHIP_NOT_ENOUGH_MONEY, shortage));
    return false;
  } 
  
  var paidForMonths = Math.floor(paidAmount / fee);
  var paidExtra = paidAmount % fee;
  
  if (paidExtra) {
    sendText(userData.telegramId, format(FINANCE_IN_MEMBERSHIP_PAID_EXTRA_MONEY, fee, paidExtra, paidForMonths, fee - paidExtra, paidForMonths + 1));
    return false;
  }
  
  var currentDate = new Date();
  var memberInfo = getMemberInfo(MEMBERS_HEADER_FULLNAME, userData.statuses[4]);  
  var membershipExpiryDate = parseDate(memberInfo.fields[MEMBERS_HEADER_MEMBERSHIP_EXPIRES]);
  var monthsDiff = monthsBetweenTwoDates(currentDate, membershipExpiryDate);
  
  var isExtendMembership = isValidDate(membershipExpiryDate) && monthsDiff <= TRIAL_PERIOD_TO_PAY_MONTHS;
  var payFromDate = isExtendMembership ? membershipExpiryDate : currentDate;
  var newMembershipExpiryDate = isExtendMembership || payFromDate.getDate() < DAY_IN_MONTH_FROM_WHICH_DISCOUNT_APLIED
                              ? new Date(payFromDate.setMonth(payFromDate.getMonth()+paidForMonths))
                              : new Date(payFromDate.getFullYear(), payFromDate.getMonth() + 1 + paidForMonths, 0, 0, 0, 0);
  newMembershipExpiryDate = formatDate(newMembershipExpiryDate);
  
  var description = '';

  insertFinanceData(userData.statuses[3], userData.statuses[4], paidAmount, userData.fullName, description); 
  updateMemberInfo(MEMBERS_HEADER_FULLNAME, userData.statuses[4], MEMBERS_HEADER_PROGRAM, program);         
  updateMemberInfo(MEMBERS_HEADER_FULLNAME, userData.statuses[4], MEMBERS_HEADER_STATUS, MEMBERS_STATUS_MEMBER);  
  updateMemberInfo(MEMBERS_HEADER_FULLNAME, userData.statuses[4], MEMBERS_HEADER_MEMBERSHIP_EXPIRES, newMembershipExpiryDate); 
  showMenu(userData.telegramId, format(FINANCE_IN_MEMBERSHIP_SUCCESS, paidAmount, userData.statuses[4], paidForMonths, newMembershipExpiryDate));
  return true;
}

function checkMembershipAndSendNotifications() {

  var sheet = SpreadsheetApp.openById(databaseSpreadSheetId).getSheetByName(SHEET_CONTACTS);
  var headerValues = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  
  var fullNameColumnIndex = headerValues.findIndex(MEMBERS_HEADER_FULLNAME);
  var firstNameColumnIndex = headerValues.findIndex(MEMBERS_HEADER_NAME);
  var callNameColumnIndex = headerValues.findIndex(MEMBERS_HEADER_CALLNAME);
  var telegramIdColumnIndex = headerValues.findIndex(MEMBERS_HEADER_TELEGRAM_ID);
  var emailColumnIndex = headerValues.findIndex(MEMBERS_HEADER_EMAIL_ADDRESS);
  var expiryDateColumnIndex = headerValues.findIndex(MEMBERS_HEADER_MEMBERSHIP_EXPIRES);
  var statusColumnIndex = headerValues.findIndex(MEMBERS_HEADER_STATUS);
  
  var values = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
  
  var msBeforeRemovedMembership = DAYS_BEFORE_REMOVED_MEMBERSHIP * 24 * 3600 * 1000;
  
  var expiredMembers = [];
  var removedMembers = [];
  var waitingPaymentMembers = [];
  
  var treasureMemberInfo = getMemberInfo(MEMBERS_HEADER_POSITION, OFFICER_POSITION_TREASURE);
  
  for (var i = 0; i < values.length; i++) {
  
    var fullName = values[i][fullNameColumnIndex];    
    if (!fullName) continue;
    
    var firstName = values[i][firstNameColumnIndex];
    var callName = values[i][callNameColumnIndex];
    var memberExpiryDate = values[i][expiryDateColumnIndex] ? parseDate(values[i][expiryDateColumnIndex]) : null;
    var memberTelegramId = values[i][telegramIdColumnIndex];
    var memberEmail = values[i][emailColumnIndex];
    var memberStatus = values[i][statusColumnIndex];
    var memberAndMessageStatus = fullName;
    var removeMembershipDate = memberExpiryDate ? new Date(memberExpiryDate.getTime() + msBeforeRemovedMembership) : null;
    
    //memberTelegramId = '432298769';
    memberEmail = 'oleksandr@tebenko.com';
    
    if (memberStatus == MEMBERS_STATUS_EX_MEMBER) {
      // –ù—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏—Ç–∏, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î —Å—Ç–∞—Ç—É—Å "–ö–æ–ª–∏—à–Ω—ñ–π —á–ª–µ–Ω"
    }
    else if (memberStatus == MEMBERS_STATUS_WAITING_PAYMENT) {      
      var message = format(FINANCE_MEMBERSHIP_GUEST_NOTIFICATION, callName || firstName, treasureMemberInfo.fullName, treasureMemberInfo.fields[MEMBERS_HEADER_TELEGRAM]);
      if (memberTelegramId) {
        var callbacks = []; 
        callbacks.push({data : MEMBERS_CANCEL_WAITING_PAYMENT_CALLBACK + '___' +  fullName, text: MEMBERS_CANCEL_WAITING_PAYMENT});  
        callbacks.push({data : MEMBERS_KEEP_MEMBERSHIP_CALLBACK + '___' +  fullName, text: MEMBERS_KEEP_MEMBERSHIP});  
        sendTextWithCallbacks(memberTelegramId, callbacks, message);
        memberAndMessageStatus += ' üí¨';
      } else if (memberEmail) {
        sendEmail(treasureMemberInfo.telegramId, memberEmail, MESSAGES_EMAIL_SUBJECT, message);
        memberAndMessageStatus += ' ‚úâÔ∏è';
      }       
      waitingPaymentMembers.push(memberAndMessageStatus);
    } else if (isValidDate(memberExpiryDate) && new Date() >= memberExpiryDate && new Date() <= removeMembershipDate) {      
      var message = format(FINANCE_MEMBERSHIP_EXPIRED_MEMBER_NOTIFICATION, callName || firstName, treasureMemberInfo.fullName, treasureMemberInfo.fields[MEMBERS_HEADER_TELEGRAM]);
      if (memberTelegramId) {
        var callbacks = []; 
        callbacks.push({data : MEMBERS_CANCEL_MEMBERSHIP_CALLBACK + '___' +  fullName, text: MEMBERS_CANCEL_MEMBERSHIP});  
        callbacks.push({data : MEMBERS_KEEP_MEMBERSHIP_CALLBACK + '___' +  fullName, text: MEMBERS_KEEP_MEMBERSHIP});  
        sendTextWithCallbacks(memberTelegramId, callbacks, message);
        memberAndMessageStatus += ' üí¨';
      } else if (memberEmail) {
        sendEmail(treasureMemberInfo.telegramId, memberEmail, MESSAGES_EMAIL_SUBJECT, message);
        memberAndMessageStatus += ' ‚úâÔ∏è';
      }
      expiredMembers.push(memberAndMessageStatus);
    } else if (isValidDate(memberExpiryDate) && new Date() > removeMembershipDate) {      
      updateMemberInfo(MEMBERS_HEADER_FULLNAME, fullName, MEMBERS_HEADER_STATUS, MEMBERS_STATUS_EX_MEMBER);
      var message = format(FINANCE_MEMBERSHIP_REMOVED_NOTIFICATION, callName || firstName, treasureMemberInfo.fullName, treasureMemberInfo.fields[MEMBERS_HEADER_TELEGRAM]);
      
      if (memberTelegramId) {
        sendText(memberTelegramId, message);
        memberAndMessageStatus += ' üí¨';
      } else if (memberEmail) {
        sendEmail(treasureMemberInfo.telegramId, memberEmail, MESSAGES_EMAIL_SUBJECT, message);
        memberAndMessageStatus += ' ‚úâÔ∏è';
      }
      removedMembers.push(memberAndMessageStatus);
    }
  }

  if (expiredMembers.length || removedMembers.length || waitingPaymentMembers.length) {
    var expiredMembersList = expiredMembers.length ? expiredMembers.join('\n') : EMPTY;
    var removedMembersList = removedMembers.length ? removedMembers.join('\n') : EMPTY;
    var waitingPaymentMembersList = waitingPaymentMembers.length ? waitingPaymentMembers.join('\n') : EMPTY;

    sendText(treasureMemberInfo.telegramId, format(FINANCE_MEMBERSHIP_TREASURER_NOTIFICATION, expiredMembersList, removedMembersList, waitingPaymentMembersList));
  }
}

/* –†–û–ë–û–¢–ê –ó –ë–ê–ó–û–Æ */

function getFinanceTypes()
{
  var items = getListItemsByName(FINANCE_LISTS_TYPE);
  items.remove(FINANCE_LISTS_TYPE_TRANSFER);
  items.remove(FINANCE_LISTS_TYPE_MEMBERSHIP);
  items.remove(FINANCE_LISTS_TYPE_MEMBERSHIP_TM);
  items.unshift(FINANCE_LISTS_TYPE_MEMBERSHIP_TM);
  items.unshift(FINANCE_LISTS_TYPE_MEMBERSHIP);
  return items;
}

function insertFinanceData(type, member, value, processedByMember, description) {
    var sheet = SpreadsheetApp.openById(databaseSpreadSheetId).getSheetByName(SHEET_FINANCE);
    var headerValues = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];

    var dateColumnIndex = headerValues.findIndex(FINANCE_HEADER_DATE);
    var typeColumnIndex = headerValues.findIndex(FINANCE_HEADER_TYPE);
    var descriptionColumnIndex = headerValues.findIndex(FINANCE_HEADER_DESCRIPTION);
    var memberColumnIndex = headerValues.findIndex(FINANCE_HEADER_MEMBER);
    var processedByMemberColumnIndex = headerValues.findIndex(FINANCE_HEADER_PROCESSED_BY);
    var valueColumnIndex = headerValues.findIndex(FINANCE_HEADER_AMOUNT);

    var lastRowIndex = sheet.getLastRow();
    var lastColumnIndex = sheet.getLastColumn();

    sheet.insertRowsAfter(lastRowIndex, 1);
    var insertedRange = sheet.getRange(lastRowIndex + 1, 1, 1, lastColumnIndex);

    var values = [
        []
    ];
    for (var i = 0; i < lastColumnIndex; i++) {
        values[0].push('');
    }

    values[0][dateColumnIndex] = shortDate(new Date());
    values[0][typeColumnIndex] = type;
    values[0][memberColumnIndex] = member;
    values[0][processedByMemberColumnIndex] = processedByMember;
    values[0][descriptionColumnIndex] = description;
    values[0][valueColumnIndex] = value;

    insertedRange.setValues(values);
}

function getBalancesByMembers() {
    var sheet = SpreadsheetApp.openById(databaseSpreadSheetId).getSheetByName(SHEET_FINANCE);
    var headerValues = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];

    var processedByMemberColumnIndex = headerValues.findIndex(FINANCE_HEADER_PROCESSED_BY);
    var valueColumnIndex = headerValues.findIndex(FINANCE_HEADER_AMOUNT);

    var range = sheet.getRange(2, 1, sheet.getLastRow(), sheet.getLastColumn());
    var values = range.getValues();

    var balances = {};

    for (var i = 0; i < values.length; i++) {
        var rowValues = values[i];

        var processedByMember = rowValues[processedByMemberColumnIndex];
        var value = rowValues[valueColumnIndex];

        if (!balances[processedByMember]) {
            balances[processedByMember] = 0;
        }
        balances[processedByMember] += value;
    }
    return balances;
}