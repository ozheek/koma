var SHEET_FINANCE = "–°–∫–∞—Ä–±–Ω–∏—Ü—è";

/* –ú–ï–ù–Æ */
var FINANCE = "üíµ –§—ñ–Ω–∞–Ω—Å–∏";
var FINANCE_IN = "–û—Ç—Ä–∏–º–∞–ª–∏ –∫–æ—à—Ç–∏";
var FINANCE_OUT = "–í–∏—Ç—Ä–∞—Ç–∏–ª–∏ –∫–æ—à—Ç–∏";
var FINANCE_TRANSFER = "–ü–µ—Ä–µ–¥–∞—Ç–∏ –∫–æ—à—Ç–∏";
var FINANCE_BALANCE = "–ü–æ–∫–∞–∑–∞—Ç–∏ –±–∞–ª–∞–Ω—Å";

/* –°–ü–ò–°–ö–ò */
var FINANCE_LISTS_TYPE = '–¢–∏–ø–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π'
var FINANCE_LISTS_TYPE_TRANSFER = "–ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ—à—Ç—ñ–≤";
var FINANCE_LISTS_TYPE_MEMBERSHIP = "–ß–ª–µ–Ω—Å—Ç–≤–æ";
var FINANCE_LISTS_TYPE_MEMBERSHIP_TM = "–ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –¢–ú";
var FINANCE_LISTS_TYPE_LIBRARY = "–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞";

/* –ó–ê–ì–û–õ–û–í–ö–ò –ë–ê–ó–ò –î–ê–ù–ù–ò–• */
var FINANCE_HEADER_DATE = "–î–∞—Ç–∞";
var FINANCE_HEADER_TYPE = "–¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó";
var FINANCE_HEADER_DESCRIPTION = "–û–ø–∏—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó";
var FINANCE_HEADER_MEMBER = "–ß–ª–µ–Ω –∫–ª—É–±—É";
var FINANCE_HEADER_PROCESSED_BY = "–•—Ç–æ –ø—Ä–æ–≤—ñ–≤ –æ–ø–µ—Ä–∞—Ü—ñ—é";
var FINANCE_HEADER_AMOUNT = "–°—É–º–∞ (–≥—Ä–Ω)";

/* –¢–ï–ö–°–¢–ò */
var FINANCE_NO_DESCRIPTION = "–û–ø–∏—Å—É –Ω–µ–º–∞—î";

var FINANCE_WRONG_AMOUNT = "–í–≤–µ–¥–µ–Ω–∞ –≤–∞–º–∏ —Å—É–º–∞ '{0}' –Ω–µ —î —á–∏—Å–ª–æ–º, –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É —â–µ —Ä–∞–∑:";

var FINANCE_TRANSFER_DESCRIPTION = '–ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ—à—Ç–∏ –≤—ñ–¥ —á–ª–µ–Ω–∞ –∫–ª—É–±—É {0} —á–ª–µ–Ω—É –∫–ª—É–±–∞ {1}';
var FINANCE_TRANSFER_SUCCESS = '–î—è–∫—É—é, –∑–∞–ø–∏—Å–∞–≤, —â–æ –≤–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ {0}–≥—Ä–Ω {1}! üòç';
var FINANCE_TRANSFER_AMOUNT = '–Ø–∫—É —Å—É–º—É (–≥—Ä–Ω) –≤–∏ –ø–µ—Ä–µ–¥–∞—î—Ç–µ {0}?';
var FINANCE_TRANSFER_START = '–û–±–µ—Ä—ñ—Ç—å —á–ª–µ–Ω–∞ –∫–ª—É–±—É, —è–∫–æ–º—É –≤–∏ –ø–µ—Ä–µ–¥–∞—î—Ç–µ –∫–æ—à—Ç–∏?';

var FINANCE_OUT_TM_SUCCESS = '–î—è–∫—É—é, –∑–∞–ø–∏—Å–∞–≤, —â–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ —Å–ø–ª–∞—Ç—É –≤ –¢–ú {0}–≥—Ä–Ω –∑–∞ {1}! üòâ';
var FINANCE_OUT_TM_AMOUNT = '–Ø–∫–∞ —Å—É–º–∞ (–≥—Ä–Ω) —Å–ø–ª–∞—á–µ–Ω–∞ –≤ –¢–ú –∑–∞ {0}?';

var FINANCE_OUT_SUCCESS = '–î—è–∫—É—é, –∑–∞–ø–∏—Å–∞–≤, —â–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ {0}–≥—Ä–Ω –Ω–∞ {1}! üòâ';
var FINANCE_OUT_AMOUNT = '–Ø–∫–∞ —Å—É–º–∞ (–≥—Ä–Ω)?';
var FINANCE_OUT_MEMBERSHIP = '–û–±–µ—Ä—ñ—Ç—å —á–ª–µ–Ω–∞ –∫–ª—É–±—É, –∑–∞ —è–∫–æ–≥–æ —Å–ø–ª–∞—á–µ–Ω–æ —á–ª–µ–Ω—Å—å–∫–∏–π –≤–Ω–µ—Å–æ–∫?';
var FINANCE_OUT_DESCRIPTION = '–í–∫–∞–∂—ñ—Ç—å –æ–ø–∏—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω:';
var FINANCE_OUT_START= '–ù–∞ —â–æ –±—É–ª–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –≥—Ä–æ—à—ñ (–≤–∏–±–µ—Ä—ñ—Ç—å –∑ –º–µ–Ω—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç)?';

var FINANCE_IN_TM_SUCCESS = '–î—è–∫—É—é, –∑–∞–ø–∏—Å–∞–≤, —â–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —á–ª–µ–Ω—Å—å–∫–∏–π –≤–Ω–µ—Å–æ–∫ {0}–≥—Ä–Ω –≤—ñ–¥ {1}! üòâ';
var FINANCE_IN_SUCCESS = '–î—è–∫—É—é, –∑–∞–ø–∏—Å–∞–≤, —â–æ –æ—Ç—Ä–∏–º–∞–Ω–æ {0}–≥—Ä–Ω –∑–∞ {1}! üòâ';
var FINANCE_IN_AMOUNT = '–Ø–∫–∞ —Å—É–º–∞ (–≥—Ä–Ω)?';
var FINANCE_IN_MEMBERSHIP = '–û–±–µ—Ä—ñ—Ç—å —á–ª–µ–Ω–∞ –∫–ª—É–±—É, —â–æ —Å–ø–ª–∞—Ç–∏–≤ —á–ª–µ–Ω—Å—å–∫–∏–π –≤–Ω–µ—Å–æ–∫?';
var FINANCE_IN_DESCRIPTION = '–í–∫–∞–∂—ñ—Ç—å –æ–ø–∏—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω:';
var FINANCE_IN_START = '–ó–∞ —â–æ –±—É–ª–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –≥—Ä–æ—à—ñ (–≤–∏–±–µ—Ä—ñ—Ç—å –∑ –º–µ–Ω—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç)?';

var FINANCE_BALANCE_TITLE = "–í –∫–æ–≥–æ –≥—Ä–æ—à—ñ –∫–ª—É–±—É:\r\n\r\n";
var FINANCE_BALANCE_TOTAL = '\r\n<b>–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> {0}–≥—Ä–Ω';
var FINANCE_BALANCE_RECORD = '<b>{0}:</b> {1}–≥—Ä–Ω\n';

function showBalancesByMembers(userTelegramId) {
    var balances = getBalancesByMembers();
    var html = FINANCE_BALANCE_TITLE;
    var total = 0;
    for (var key in balances) {
        var balance = balances[key];
        total += 1 * balance;
        if (balance != 0) {
          html += format(FINANCE_BALANCE_RECORD, key, balance);
        }
    }

    html += format(FINANCE_BALANCE_TOTAL, total);

    showMenu(userTelegramId, html);
}

function processFinance(userData, text) {
    if (userData.statuses[2]) {
        if (userData.statuses[2] == FINANCE_TRANSFER) {
            if (userData.statuses[3]) {
                if (!userData.statuses[4]) {
                  if(!isNaN(text)) {
                    var description = format(FINANCE_TRANSFER_DESCRIPTION, userData.fullName ,userData.statuses[3]);
                    insertFinanceData(FINANCE_LISTS_TYPE_TRANSFER, userData.statuses[3], -1 * text, userData.fullName, description);
                    insertFinanceData(FINANCE_LISTS_TYPE_TRANSFER, userData.fullName, text, userData.statuses[3], description);
                    showMenu(userData.telegramId, format(FINANCE_TRANSFER_SUCCESS,text , userData.statuses[3]));
                    return true;
                  }
                  else {
                    showMenu(userData.telegramId, format(FINANCE_WRONG_AMOUNT, text));
                    return false;
                  }
                }
            } else {
                showMenu(userData.telegramId, format(FINANCE_TRANSFER_AMOUNT, text));
                return true;
            }
        } else if (userData.statuses[2] == FINANCE_OUT) {
            if (userData.statuses[3]) {
                if (userData.statuses[3] == FINANCE_LISTS_TYPE_MEMBERSHIP_TM) {
                    if (userData.statuses[4]) {
                      if (!userData.statuses[5]) {
                        if(!isNaN(text)) {
                          // ADD DEBIT BALANCE RECORD
                          var description = '';
                          insertFinanceData(FINANCE_LISTS_TYPE_MEMBERSHIP_TM, userData.statuses[4], -1 * text, userData.fullName, description);
                          showMenu(userData.telegramId, format(FINANCE_OUT_TM_SUCCESS, text, userData.statuses[4]));
                          //showParentManagementMenu(userData);
                          return true;
                        }
                        else {
                          showMenu(userData.telegramId, format(FINANCE_WRONG_AMOUNT, text));
                          return false;
                        }
                      }
                    } else {
                        showMenu(userData.telegramId, format(FINANCE_OUT_TM_AMOUNT, text));
                        return true;
                    }
                } else {
                    if (userData.statuses[4]) {
                      if (!userData.statuses[5]) {
                        if(!isNaN(text)) {
                          // ADD DEBIT BALANCE RECORD
                          var description = userData.statuses[4] == FINANCE_NO_DESCRIPTION ? '' : userData.statuses[4];
                          insertFinanceData(userData.statuses[3], null, -1 * text, userData.fullName, description);
                          showMenu(userData.telegramId, format(FINANCE_OUT_SUCCESS, text, userData.statuses[3]));
                          //showParentManagementMenu(userData);
                          return true;
                        }
                        else {
                          showMenu(userData.telegramId, format(FINANCE_WRONG_AMOUNT, text));
                          return false;
                        }
                      }
                    } else {
                        showMenu(userData.telegramId, FINANCE_OUT_AMOUNT);
                        return true;
                    }

                }
            } else {
                if (text == FINANCE_LISTS_TYPE_MEMBERSHIP || text == FINANCE_LISTS_TYPE_MEMBERSHIP_TM) {
                    showMenu(userData.telegramId, FINANCE_OUT_MEMBERSHIP, getAllMembers());
                    return true;
                } else {
                    showMenu(userData.telegramId, FINANCE_OUT_DESCRIPTION, [FINANCE_NO_DESCRIPTION]);
                    return true;
                }
            }
        } else if (userData.statuses[2] == FINANCE_IN) {
            if (userData.statuses[3]) {
                if (userData.statuses[3] == FINANCE_LISTS_TYPE_MEMBERSHIP_TM || userData.statuses[3] == FINANCE_LISTS_TYPE_MEMBERSHIP) {
                    if (userData.statuses[4]) {
                      if (!userData.statuses[5]) {
                        if(!isNaN(text)) {
                          var description = '';
                          insertFinanceData(userData.statuses[3], userData.statuses[4], text, userData.fullName, description);
                          showMenu(userData.telegramId, format(FINANCE_IN_SUCCESS, text, userData.statuses[3]));
                          return true;
                        }
                        else {
                          showMenu(userData.telegramId, format(FINANCE_WRONG_AMOUNT, text));
                          return false;
                        }
                      }
                    } else {
                      showMenu(userData.telegramId, format(FINANCE_IN_AMOUNT, text));
                        return true;
                    }
                } else {
                    if (userData.statuses[4]) {
                      if (!userData.statuses[5]) {
                        if(!isNaN(text)) {
                          // ADD CREDIT BALANCE RECORD      
                          var description = userData.statuses[4] == FINANCE_NO_DESCRIPTION ? '' : userData.statuses[4];
                          insertFinanceData(userData.statuses[3], null, text, userData.fullName, description);
                          showMenu(userData.telegramId, format(FINANCE_IN_SUCCESS, text, userData.statuses[3]));
                          return true;
                        }
                        else {
                          showMenu(userData.telegramId, format(FINANCE_WRONG_AMOUNT, text));
                          return false;
                        }
                      }
                    } else {
                        showMenu(userData.telegramId, FINANCE_IN_AMOUNT);
                        return true;
                    }

                }
            } else {
                if (text == FINANCE_LISTS_TYPE_MEMBERSHIP || text == FINANCE_LISTS_TYPE_MEMBERSHIP_TM) {
                    showMenu(userData.telegramId, FINANCE_IN_MEMBERSHIP, getAllMembers());
                    return true;
                } else {
                    showMenu(userData.telegramId, FINANCE_IN_DESCRIPTION, [FINANCE_NO_DESCRIPTION]);
                    return true;
                }
            }
        }
    } else {
        if (text == FINANCE_BALANCE) {
            showBalancesByMembers(userData.telegramId);
            return true;
        } else if (text == FINANCE_OUT) {            
            showMenu(userData.telegramId, FINANCE_OUT_START, getFinanceTypes());
            return true;
        } else if (text == FINANCE_IN) {
            showMenu(userData.telegramId, FINANCE_IN_START, getFinanceTypes());
            return true;
        } else if (text == FINANCE_TRANSFER) {
            showMenu(userData.telegramId, FINANCE_TRANSFER_START,
                getAllMembers());
            return true;
        }
    }
}

/* –†–û–ë–û–¢–ê –ó –ë–ê–ó–û–Æ */

function getFinanceTypes()
{
  var items = getListItemsByName(FINANCE_LISTS_TYPE);
  items.remove(FINANCE_LISTS_TYPE_TRANSFER);
  items.remove(FINANCE_LISTS_TYPE_MEMBERSHIP);
  items.remove(FINANCE_LISTS_TYPE_MEMBERSHIP_TM);
  items.unshift(FINANCE_LISTS_TYPE_MEMBERSHIP_TM);
  items.unshift(FINANCE_LISTS_TYPE_MEMBERSHIP);
  return items;
}

function insertFinanceData(type, member, value, processedByMember, description) {
    var sheet = SpreadsheetApp.openById(databaseSpreadSheetId).getSheetByName(SHEET_FINANCE);
    var headerValues = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];

    var dateColumnIndex = headerValues.findIndex(FINANCE_HEADER_DATE);
    var typeColumnIndex = headerValues.findIndex(FINANCE_HEADER_TYPE);
    var descriptionColumnIndex = headerValues.findIndex(FINANCE_HEADER_DESCRIPTION);
    var memberColumnIndex = headerValues.findIndex(FINANCE_HEADER_MEMBER);
    var processedByMemberColumnIndex = headerValues.findIndex(FINANCE_HEADER_PROCESSED_BY);
    var valueColumnIndex = headerValues.findIndex(FINANCE_HEADER_AMOUNT);

    var lastRowIndex = sheet.getLastRow();
    var lastColumnIndex = sheet.getLastColumn();

    sheet.insertRowsAfter(lastRowIndex, 1);
    var insertedRange = sheet.getRange(lastRowIndex + 1, 1, 1, lastColumnIndex);

    var values = [
        []
    ];
    for (var i = 0; i < lastColumnIndex; i++) {
        values[0].push('');
    }

    values[0][dateColumnIndex] = shortDate(new Date());
    values[0][typeColumnIndex] = type;
    values[0][memberColumnIndex] = member;
    values[0][processedByMemberColumnIndex] = processedByMember;
    values[0][descriptionColumnIndex] = description;
    values[0][valueColumnIndex] = value;

    insertedRange.setValues(values);
}

function getBalancesByMembers() {
    var sheet = SpreadsheetApp.openById(databaseSpreadSheetId).getSheetByName(SHEET_FINANCE);
    var headerValues = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];

    var processedByMemberColumnIndex = headerValues.findIndex(FINANCE_HEADER_PROCESSED_BY);
    var valueColumnIndex = headerValues.findIndex(FINANCE_HEADER_AMOUNT);

    var range = sheet.getRange(2, 1, sheet.getLastRow(), sheet.getLastColumn());
    var values = range.getValues();

    var balances = {};

    for (var i = 0; i < values.length; i++) {
        var rowValues = values[i];

        var processedByMember = rowValues[processedByMemberColumnIndex];
        var value = rowValues[valueColumnIndex];

        if (!balances[processedByMember]) {
            balances[processedByMember] = 0;
        }
        balances[processedByMember] += value;
    }
    return balances;
}