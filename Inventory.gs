var SHEET_INVENTORY = '–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—è';

/* –ú–ï–ù–Æ */
var INVENTORY = 'üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—è';
var INVENTORY_OUT = '–í–∏—Ç—Ä–∞—Ç–∏—Ç–∏';
var INVENTORY_IN = '–î–æ–¥–∞—Ç–∏';
var INVENTORY_TRANSFER = '–ü–µ—Ä–µ–¥–∞—Ç–∏';
var INVENTORY_BALANCE = "–ü–æ–∫–∞–∑–∞—Ç–∏ –±–∞–ª–∞–Ω—Å";

/* –°–ü–ò–°–ö–ò */
var INVENTORY_LISTS_TYPE = '–ú–∞–π–Ω–æ';

/* –ó–ê–ì–û–õ–û–í–ö–ò –ë–ê–ó–ò –î–ê–ù–ù–ò–• */
var INVENTORY_HEADER_DATE = "–î–∞—Ç–∞";
var INVENTORY_HEADER_TYPE = "–ú–∞–π–Ω–æ";
var INVENTORY_HEADER_DESCRIPTION = "–û–ø–∏—Å";
var INVENTORY_HEADER_MEMBER = "–ß–ª–µ–Ω –∫–ª—É–±—É";
var INVENTORY_HEADER_AMOUNT = "–ö—ñ–ª—å–∫—ñ—Å—Ç—å";

/* –¢–ï–ö–°–¢–ò */
var INVENTORY_NO_DESCRIPTION = "–û–ø–∏—Å—É –Ω–µ–º–∞—î";

var INVENTORY_TRANSFER_DESCRIPTION = '–ü–µ—Ä–µ–¥–∞—á–∞ –º–∞–π–Ω–∞ –≤—ñ–¥ —á–ª–µ–Ω–∞ –∫–ª—É–±—É {0} —á–ª–µ–Ω—É –∫–ª—É–±–∞ {1}';
var INVENTORY_TRANSFER_SUCCESS = '–î—è–∫—É—é, –∑–∞–ø–∏—Å–∞–≤, —â–æ –≤–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ {0}—à—Ç {1} {2}! üòç';
var INVENTORY_TRANSFER_AMOUNT = '–Ø–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å {0} –≤–∏ –ø–µ—Ä–µ–¥–∞—î—Ç–µ?';
var INVENTORY_TRANSFER_TYPE = '–í–∏–±–µ—Ä—ñ—Ç—å –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≥–æ, —â–æ –≤–∏ –ø–µ—Ä–µ–¥–∞—î—Ç–µ?';
var INVENTORY_TRANSFER_START = '–û–±–µ—Ä—ñ—Ç—å —á–ª–µ–Ω–∞ –∫–ª—É–±—É, —è–∫–æ–º—É –≤–∏ –ø–µ—Ä–µ–¥–∞—î—Ç–µ –º–∞–π–Ω–æ?';

var INVENTORY_WRONG_AMOUNT = '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.'; 

var INVENTORY_OUT_SUCCESS = '–î—è–∫—É—é, –∑–∞–ø–∏—Å–∞–≤, —â–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ {0}—à—Ç {1}! üòâ';
var INVENTORY_OUT_AMOUNT = '–Ø–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏ –≤–∏—Ç—Ä–∞—á–∞—î—Ç–µ?';
var INVENTORY_OUT_DESCRIPTION = '–í–∫–∞–∂—ñ—Ç—å –æ–ø–∏—Å –º–∞–π–Ω–∞, —â–æ –≤–∏—Ç—Ä–∞—á–∞—î—Ç–µ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω):';
var INVENTORY_OUT_START = '–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏?';

var INVENTORY_IN_AMOUNT = '–Ø–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏ –¥–æ–¥–∞—î—Ç–µ?';
var INVENTORY_IN_SUCCESS = '–î—è–∫—É—é, –∑–∞–ø–∏—Å–∞–≤, —â–æ –¥–æ–¥–∞–Ω–æ {0}—à—Ç {1}! üòâ';
var INVENTORY_IN_DESCRIPTION = '–í–∫–∞–∂—ñ—Ç—å –æ–ø–∏—Å –º–∞–π–Ω–∞, —â–æ –¥–æ–¥–∞—î—Ç–µ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω):';
var INVENTORY_IN_START = '–©–æ –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏?';

var INVENTORY_BALANCE_TITLE = "<b>–í –∫–æ–≥–æ —è–∫–µ –º–∞–π–Ω–æ –∫–ª—É–±—É:</b>\r\n\r\n";
var INVENTORY_BALANCE_MEMBER = '<b>{0}</b>\n';
var INVENTORY_BALANCE_RECORD = '{0}: {1}\n';

function showInventoryBalance(userTelegramId) {
    var balanceByMembers = getInventoryBalances();
    var html = INVENTORY_BALANCE_TITLE;
  
    for (var memberName in balanceByMembers) {
        var member = balanceByMembers[memberName];
        //var total = 0;
      
        html += format(INVENTORY_BALANCE_MEMBER, (memberName ? memberName : CLUB_NAME));
        for (var type in member) {
            var balance = member[type];
            //total += 1 * balance;
            html += format(INVENTORY_BALANCE_RECORD, type, balance);
        }
        html += '\n';
    }

    showMenu(userTelegramId, html);
}

function processInventory(userData, text) {
    if (userData.statuses[2]) {
        if (userData.statuses[2] == INVENTORY_TRANSFER) {
            if (userData.statuses[3]) {
                if (userData.statuses[4]) {
                    if (!userData.statuses[5]) {
                      if(!isNaN(text)) {
                        var description = format(INVENTORY_TRANSFER_DESCRIPTION, userData.fullName, userData.statuses[3]);
                        insertInventoryData(userData.statuses[4], userData.fullName, -1 * text, description);
                        insertInventoryData(userData.statuses[4], userData.statuses[3], text, description);
                        showMenu(userData.telegramId, format(INVENTORY_TRANSFER_SUCCESS, text, userData.statuses[4], userData.statuses[3]));
                        return true;
                      }
                      else {
                        showMenu(userData.telegramId, format(INVENTORY_WRONG_AMOUNT, text));
                        return false;
                      }
                    }
                } else {
                    showMenu(userData.telegramId, format(INVENTORY_TRANSFER_AMOUNT, text));
                    return true;
                }
            } else {
                showMenu(userData.telegramId, INVENTORY_TRANSFER_TYPE, getListOfInventoryTypes());
                return true;
            }
        } else if (userData.statuses[2] == INVENTORY_OUT) {
            if (userData.statuses[3]) {
                if (userData.statuses[4]) {
                    if (!userData.statuses[5]) {
                      if(!isNaN(text)) {
                        var description = userData.statuses[4] == INVENTORY_NO_DESCRIPTION ? '' : userData.statuses[4];
                        insertInventoryData(userData.statuses[3], userData.fullName, -1 * text, description);
                        showMenu(userData.telegramId, format(INVENTORY_OUT_SUCCESS, text, userData.statuses[3]));
                        //showParentManagementMenu(userData);
                        return true;
                      }
                      else {
                        showMenu(userData.telegramId, format(INVENTORY_WRONG_AMOUNT, text));
                        return false;
                      }
                    }
                } else {
                    showMenu(userData.telegramId, INVENTORY_OUT_AMOUNT);
                    return true;
                }

            } else {
                showMenu(userData.telegramId, INVENTORY_OUT_DESCRIPTION, [INVENTORY_NO_DESCRIPTION]);
                return true;
            }
        } else if (userData.statuses[2] == INVENTORY_IN) {
            if (userData.statuses[3]) {
                if (userData.statuses[4]) {
                    if (!userData.statuses[5]) {
                      if(!isNaN(text)) {
                        var description = userData.statuses[4] == INVENTORY_NO_DESCRIPTION ? '' : userData.statuses[4];
                        insertInventoryData(userData.statuses[3], userData.fullName, text, description);
                        showMenu(userData.telegramId, format(INVENTORY_IN_SUCCESS, text, userData.statuses[3]));
                        return true;
                      }
                      else {
                        showMenu(userData.telegramId, format(INVENTORY_WRONG_AMOUNT, text));
                        return false;
                      }
                    }
                } else {
                    showMenu(userData.telegramId, INVENTORY_IN_AMOUNT);
                    return true;
                }
            } else {
                showMenu(userData.telegramId, INVENTORY_IN_DESCRIPTION, [INVENTORY_NO_DESCRIPTION]);
                return true;
            }
        }
    } else {
        if (text == INVENTORY_BALANCE) {
            showInventoryBalance(userData.telegramId);
            return true;
        } else if (text == INVENTORY_OUT) {
            showMenu(userData.telegramId, INVENTORY_OUT_START, getListOfInventoryTypes());
            return true;
        } else if (text == INVENTORY_IN) {
            showMenu(userData.telegramId, INVENTORY_IN_START, getListOfInventoryTypes());
            return true;
        } else if (text == INVENTORY_TRANSFER) {
            showMenu(userData.telegramId, INVENTORY_TRANSFER_START,
                getAllMembers());
            return true;
        }
    }
}

/* –†–û–ë–û–¢–ê –ó –ë–ê–ó–û–Æ */

function getListOfInventoryTypes()
{
    var sheet = SpreadsheetApp.openById(databaseSpreadSheetId).getSheetByName(SHEET_INVENTORY);
    var headerValues = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];

    var typeColumnIndex = headerValues.findIndex(INVENTORY_HEADER_TYPE);
  
    var range = sheet.getRange(2, typeColumnIndex + 1, sheet.getLastRow(), 1);
    var values = range.getValues();
  
    var items = getListItemsByName(INVENTORY_LISTS_TYPE);

    for(var i = 0; i < values.length; i++)
    {
      if (items.indexOf(values[i][0]) == -1)
      {        
        items.push(values[i][0]);
      }
    }
 
    return items;
}

function insertInventoryData(type, member, value, description) {

    var sheet = SpreadsheetApp.openById(databaseSpreadSheetId).getSheetByName(SHEET_INVENTORY);
    var headerValues = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];

    var dateColumnIndex = headerValues.findIndex(INVENTORY_HEADER_DATE);
    var typeColumnIndex = headerValues.findIndex(INVENTORY_HEADER_TYPE);
    var descriptionColumnIndex = headerValues.findIndex(INVENTORY_HEADER_DESCRIPTION);
    var memberColumnIndex = headerValues.findIndex(INVENTORY_HEADER_MEMBER);
    var valueColumnIndex = headerValues.findIndex(INVENTORY_HEADER_AMOUNT);

    var lastRowIndex = sheet.getLastRow();
    var lastColumnIndex = sheet.getLastColumn();

    sheet.insertRowsAfter(lastRowIndex, 1);
    var insertedRange = sheet.getRange(lastRowIndex + 1, 1, 1, lastColumnIndex);

    var values = [
        []
    ];
    for (var i = 0; i < lastColumnIndex; i++) {
        values[0].push('');
    }

    values[0][dateColumnIndex] = shortDate(new Date());
    values[0][typeColumnIndex] = type;
    values[0][memberColumnIndex] = member;
    values[0][descriptionColumnIndex] = description;
    values[0][valueColumnIndex] = value;

    insertedRange.setValues(values);
}

function getInventoryBalances() {
    var sheet = SpreadsheetApp.openById(databaseSpreadSheetId).getSheetByName(SHEET_INVENTORY);
    var headerValues = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];

    var memberColumnIndex = headerValues.findIndex(INVENTORY_HEADER_MEMBER);
    var typeColumnIndex = headerValues.findIndex(INVENTORY_HEADER_TYPE);
    var valueColumnIndex = headerValues.findIndex(INVENTORY_HEADER_AMOUNT);

    var range = sheet.getRange(2, 1, sheet.getLastRow(), sheet.getLastColumn());
    var values = range.getValues();

    var balances = {};

    for (var i = 0; i < values.length; i++) {
        var rowValues = values[i];

        var member = rowValues[memberColumnIndex];
        var type = rowValues[typeColumnIndex];
        var value = rowValues[valueColumnIndex];

        if (type) {
            if (!balances[member]) {
              balances[member] = {};
            }
          
            if (!balances[member][type]) {
              balances[member][type] = 0;
            }
            
            balances[member][type] += value;         
        }
    }
    return balances;
}