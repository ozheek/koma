var SHEET_MEETINGS = '–ó–∞—Å—ñ–¥–∞–Ω–Ω—è';

/* –û–ü–¶–Ü–á */

var LIBRARY_BOOK_FEE = 10; // 10–≥—Ä–Ω

/* –°–ü–ò–°–ö–ò */

var MEETING_PROJECTS = '–ü—Ä–æ–µ–∫—Ç–∏';

/* –ú–ï–ù–Æ */

var MEETING = "üé§Ô∏è –ó–∞—Å—ñ–¥–∞–Ω–Ω—è";

var MEETING_SHOW_MY_ROLES = "–ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ—ó —Ä–æ–ª—ñ";
var MEETING_SHOW_PROGRAM = "–ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è";
var MEETING_SIGN_UP_FOR_ROLE = "–ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —Ä–æ–ª—å";

var MEETING_ASSIGN_ROLE = "–ó–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞ —Ä–æ–ª—å";
var MEETING_SHOW_ROLES = "–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞ —è–∫—ñ —Ä–æ–ª—ñ –∑–∞–ø–∏—Å–∞–Ω–∏–π —á–ª–µ–Ω –∫–ª—É–±—É";
var MEETING_CANCEL = '–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è';

var MEETING_SIGN_UP_DATE = "–í–∏–±—Ä–∞—Ç–∏ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è (–¥–∞—Ç—É)";
var MEETING_SIGN_UP_ROLE = "–í–∏–±—Ä–∞—Ç–∏ —Ä–æ–ª—å";
var MEETING_SIGN_UP_ROLE_REJECTED = "–ù–∞ –∂–∞–ª—å, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —Ä–æ–ª—å –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ <b>{0}</b>, –±–æ <b>–≤–∂–µ –∑–∞–ø–∏—Å–∞–Ωi –Ω–∞ —Ä–æ–ªi</b>: <i>{1}</i>";

var MEETING_ROLE_REJECT = '‚ùó –ó–≤—ñ–ª—å–Ω–∏—Ç–∏';
var MEETING_ROLE_CHANGE = 'üìù –ó–º—ñ–Ω–∏—Ç–∏';
var MEETING_ROLE_CLEAN = '–ù—ñ—Ö—Ç–æ';
var MEETING_ROLE_EMPTY = '‚ùó –°–∫–∞—Å—É–≤–∞—Ç–∏';
var MEETING_ROLE_NOBODY = '–ù—ñ—Ö—Ç–æ –Ω–µ –≤–∏–∫–æ–Ω—É–≤–∞–≤';
var MEETING_ROLE_REJECT_CALLBACK = 'unsign_role';
var MEETING_ROLE_CHANGE_CALLBACK = 'change_role';
var MEETING_ROLE_CLEAN_CALLBACK = 'clean_role';
var MEETING_SPEACH_CHANGE_PROJECT_CALLBACK = 'change_speach_project';
var MEETING_SPEACH_CHANGE_TITLE_CALLBACK = 'change_speach_title';
var MEETING_CHANGE_WORD_OF_THE_DAY_CALLBACK = 'change_meeting_word';
var MEETING_CHANGE_THEME_CALLBACK = 'change_meeting_theme';

var MEETING_SPEACH_CHANGE_PROJECT = '‚úèÔ∏è –í–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ–µ–∫—Ç –ø—Ä–æ–º–æ–≤–∏';
var MEETING_SPEACH_CHANGE_TITLE = '‚úèÔ∏è –í–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É –ø—Ä–æ–º–æ–≤–∏';
var MEETING_CHANGE_WORD_OF_THE_DAY = '‚úèÔ∏è –í–∫–∞–∑–∞—Ç–∏ —Å–ª–æ–≤–æ –¥–Ω—è';
var MEETING_CHANGE_THEME = '‚úèÔ∏è –í–∫–∞–∑–∞—Ç–∏ —Ç–µ–º—É –∑–∞—Å—ñ–¥–∞–Ω–Ω—è';

var MEETING_EDIT = '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏';

/* –û–°–ù–û–í–ù–Ü –†–û–õ–Ü */

var MEETING_ABOUT = '–ü—Ä–æ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è';
var MEETING_ROLE_SPEACH = "–ü—Ä–æ–º–æ–≤–∞";
var MEETING_ROLE_SPEACH_PROJECT = "–ü—Ä–æ–µ–∫—Ç –ø—Ä–æ–º–æ–≤–∏";
var MEETING_ROLE_SPEACH_TITLE = "–ù–∞–∑–≤–∞ –ø—Ä–æ–º–æ–≤–∏";
var MEETING_ROLE_EVALUATION = "–í—ñ–¥–≥—É–∫ –Ω–∞ –ø—Ä–æ–º–æ–≤—É";
var MEETING_ROLE_TOASTMASTER = "–ì–æ–ª–æ–≤–∞";
var MEETING_ROLE_AH_COUNTER = "–ú–∏—Å–ª–∏–≤–µ—Ü—å –∑–∞ —Å–ª–æ–≤–∞–º–∏-–ø–∞—Ä–∞–∑–∏—Ç–∞–º–∏";
var MEETING_ROLE_TIMER = "–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä —á–∞—Å—É";
var MEETING_ROLE_GRAMMARIAN = "–ó–Ω–∞–≤–µ—Ü—å –º–æ–≤–∏";
var MEETING_ROLE_SPEAKER_ADVICE = "–ü–æ—Ä–∞–¥–∏ –æ—Ä–∞—Ç–æ—Ä—É";
var MEETING_ROLE_LIBRARIAN = "–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä";
var MEETING_ROLE_TABLE_TOPIC_MASTER = "–ú–∞–π—Å—Ç–µ—Ä –µ–∫—Å–ø—Ä–æ–º—Ç-—Å–µ—Å—ñ—ó";
var MEETING_ROLE_TABLE_TOPIC_EVALUATOR = "–í—ñ–¥–≥—É–∫ –Ω–∞ –µ–∫—Å–ø—Ä–æ–º—Ç-—Å–µ—Å—ñ—é";
var MEETING_ROLE_GENERAL_EVALUATOR = "–ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è";

var MEETING_WORD_OF_THE_DAY = "–°–ª–æ–≤–æ –¥–Ω—è";
var MEETING_THEME = "–¢–µ–º–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è";

/* –¢–ï–ö–°–¢–ò */

var MEETING_ABOUT_CURRENT_TEXT = '–í—Å—Ç–∞–≤–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–µ–∫—Å—Ç';
var MEETING_EDIT_SUCCESS = '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ! üòé';
var MEETING_EDIT_FAILED = '–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è üòü';
var MEETING_EDIT_CHOOSE_DATE = '–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞—Å—ñ–¥–∞–Ω–Ω—è, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:';
var MEETING_EDIT_SELECT = '–Ø–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?';
var MEETING_EDIT_ABOUT_1 = '–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –º–µ–Ω—ñ –Ω–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–Ω–∫—É—Ä—Å (–≥–æ–ª–æ–≤–Ω–∏–π —Å—É–¥–¥—è, —É—á–∞—Å–Ω–∏–∫–∏) –∞–±–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–µ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è.\
\n\
\n\–ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç–µ–≥ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è (b), –∫—É—Ä—Å–∏–≤—É (i), —Ç–∞ —Ç–µ–≥–∏ a, code, pre.';
var MEETING_EDIT_ABOUT_2 = '–ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ, –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–≤–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –æ–ø–∏—Å –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –≤ –ø–æ–ª–µ –¥–ª—è –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É —ñ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –π–æ–≥–æ.';
var MEETING_EDIT_WORD_OF_THE_DAY = '–í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ –¥–Ω—è –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ:';
var MEETING_EDIT_THEME = '–í–≤–µ–¥—ñ—Ç—å —Ç–µ–º—É –∑–∞—Å—ñ–¥–∞–Ω–Ω—è:';
var MEETING_NOT_FOUND = '–ù–∞ –∂–∞–ª—å, –∑–∞—Å—ñ–¥–∞–Ω–Ω—è <b>{0}</b> –Ω–µ –±—É–ª–æ –∑–Ω–∞–π–¥–µ–Ω–æ...\
                         \n\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –í–∏ –≤–∏–±—Ä–∞–ª–∏ –¥–∞—Ç—É!';

var MEETING_ASSIGN_ROLE_SUCCESS_MEMBER = '–ü—Ä–∏–≤—ñ—Ç, {0}! ‚ò∫Ô∏è –ù–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ <b>{1}</b> –≤–∏ –±—É–¥–µ—Ç–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ä–æ–ª—å <b>{2}</b> üòç.';

var MEETING_CANCEL_CHOOSE_DATE = '–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞—Å—ñ–¥–∞–Ω–Ω—è, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏:';

var MEETING_SPEACH_NO_PROJECT = 'üóÇ <b>–ü—Ä–æ–µ–∫—Ç –ø—Ä–æ–º–æ–≤–∏</b>\
\n\n–Ø–∫—â–æ –≤–∏ –≤–∏–∫–æ–Ω—É—î—Ç–µ –ø—Ä–æ–µ–∫—Ç –∑–∞ –ø–µ–≤–Ω–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º, –≤–∫–∞–∂—ñ—Ç—å –π–æ–≥–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ. –Ø–∫—â–æ –≤–∞—à–∞ –ø—Ä–æ–º–æ–≤–∞ –±–µ–∑ –ø—Ä–æ–µ–∫—Ç—É, <b>–æ–±–æ–≤\'—è–∑–∫–æ–≤–æ</b> –≤–∫–∞–∂—ñ—Ç—å <b>–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç—É</b> üëáüèª';
var MEETING_SPEACH_CONFIRM_PROJECT = 'üóÇ <b>–ü—Ä–æ–µ–∫—Ç –ø—Ä–æ–º–æ–≤–∏</b>\
\n\n–í –º–µ–Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ, —â–æ –ø—Ä–æ–µ–∫—Ç –≤–∞—à–æ—ó –ø—Ä–æ–º–æ–≤–∏: <b>{0}</b>.\
\n\n–Ø–∫—â–æ —â–æ—Å—å –∑–º—ñ–Ω–∏–ª–æ—Å—å, —Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —ñ –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–≤–∏–π –ø—Ä–æ–µ–∫—Ç üëáüèª';
var MEETING_SPEACH_NO_TITLE = 'üì∞ <b>–ù–∞–∑–≤–∞ –≤–∞—à–æ—ó –ø—Ä–æ–º–æ–≤–∏</b>\
\n\n–ß–∏ –∑–Ω–∞—î—Ç–µ –≤–∏ –≤–∂–µ –Ω–∞–∑–≤—É –ø—Ä–æ–º–æ–≤–∏? –Ø–∫—â–æ —Ç–∞–∫, —Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —ñ –≤–∫–∞–∂—ñ—Ç—å —ó—ó üëáüèª';
var MEETING_SPEACH_CONFIRM_TITLE = 'üì∞ <b>–ù–∞–∑–≤–∞ –≤–∞—à–æ—ó –ø—Ä–æ–º–æ–≤–∏</b>\
\n\n–í –º–µ–Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ, —â–æ –Ω–∞–∑–≤–∞ –≤–∞—à–æ—ó –ø—Ä–æ–º–æ–≤–∏: <b>{0}</b>.\
\n\n–Ø–∫—â–æ –Ω–∞–∑–≤–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—å, —Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —ñ –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É üëáüèª';

var MEETING_NO_WORD_OF_THE_DAY = 'üí¨ <b>–°–ª–æ–≤–æ –¥–Ω—è</b>\
\n\n–í–∏ –≤–∂–µ –ø—Ä–∏–¥—É–º–∞–ª–∏ —Å–ª–æ–≤–æ –¥–Ω—è? –Ø–∫—â–æ —Ç–∞–∫, –≤–∫–∞–∂—ñ—Ç—å –π–æ–≥–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëáüèª';
var MEETING_NO_THEME = 'üí° <b>–¢–µ–º–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è</b>\
\n\n–ß–∏ –∑–Ω–∞—î—Ç–µ –≤–∏ –≤–∂–µ —Ç–µ–º—É –∑–∞—Å—ñ–¥–∞–Ω–Ω—è? –Ø–∫—â–æ —Ç–∞–∫, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —ó—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëáüèª';

var MEETING_SPEACH_PROJECT_EMPTY = '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç—É';

var MEETING_SPEACH_CHOOSE_PROJECT = '–í–∫–∞–∂—ñ—Ç—å –ø—Ä–æ–µ–∫—Ç –≤–∞—à–æ—ó –ø—Ä–æ–º–æ–≤–∏:';
var MEETING_SPEACH_CHOOSE_TITLE = '–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ—ó –ø—Ä–æ–º–æ–≤–∏:';
var MEETING_CHOOSE_WORD_OF_THE_DAY = '–í–∫–∞–∂—ñ—Ç—å —Å–ª–æ–≤–æ –¥–Ω—è:';
var MEETING_CHOOSE_THEME = '–í–∫–∞–∂—ñ—Ç—å —Ç–µ–º—É –∑–∞—Å—ñ–¥–∞–Ω–Ω—è:';

var MEETING_PROGRAM_CHOOSE_DATE = '–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞—Å—ñ–¥–∞–Ω–Ω—è:';
var MEETING_PROGRAM_TITLE_1 = '<b>–ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è</b>';
var MEETING_PROGRAM_TITLE_2 = '<b>üìÜ {0}</b>';
var MEETING_PROGRAM_ROLE_INFO = '<b>{0}</b>:\n{1}\n\n';
var MEETING_PROGRAM_ROLE_SPEACH_INFO_NO_PROJECT = '<b>{0}:</b>\n{2} ‚Å†‚Äî <i>"{1}"</i>\n\n';
var MEETING_PROGRAM_ROLE_SPEACH_INFO_WITH_PROJECT = '<b>{0}:</b>\n{3} ‚Å†‚Äî <i>"{1}"</i> <code>({2})</code>\n\n';
var MEETING_PROGRAM_ROLE_NO_MEMBER = '‚á® <i>–†–æ–ª—å –≤—ñ–ª—å–Ω–∞</i>';
var MEETING_PROGRAM_ROLE_EMPTY = '‚á® <i>–ù–µ –≤–∫–∞–∑–∞–Ω–æ</i>';

var MEETING_SIGN_UP_SUCCESS = '–í—ñ—Ç–∞—é! –í–∏ –±—É–¥–µ—Ç–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ä–æ–ª—å <b>{0}</b> –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ <b>{1}</b>! üòç';
var MEETING_SIGN_UP_ROLES_BUSY = '–ù–∞ –∂–∞–ª—å, —Ä–æ–ª—å {0} –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ {1} –≤–∂–µ –∑–∞–π–Ω—è—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É —Ä–æ–ª—å.';
var MEETING_SIGN_UP_ROLES_AVAILABLE = '–î–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–ª—ñ –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è {0}:';

var MEETING_SIGN_UP_DATE_BUSY = '–ù–∞ –∂–∞–ª—å, —Ä–æ–ª—å {0} –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ {1} –≤–∂–µ –∑–∞–π–Ω—è—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –¥–∞—Ç—É.';

var MEETING_SIGN_UP_DATE_AVAILABLE = '–î–æ—Å—Ç—É–ø–Ω—ñ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–ª—ñ <b>{0}</b>:';
var MEETING_SIGN_UP_ROLE_REQUEST = '–Ø–∫—É —Ä–æ–ª—å –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–∫–æ–Ω–∞—Ç–∏?';
var MEETING_SIGN_UP_DATE_REQUEST = '–ù–∞ —è–∫–µ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∑—è—Ç–∏ —Ä–æ–ª—å?';
var MEETING_SIGN_UP_SELECT_ROLE_OR_DATE = '–•–æ—á–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Å—ñ–¥–∞–Ω–Ω—è —á–∏ —Ä–æ–ª—å?';

var MEETING_ASSIGN_ROLE_SUCCESS = '–í—ñ—Ç–∞—é! <b>{0}</b> –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ä–æ–ª—å <b>{1}</b> –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ <b>{2}</b>! üòç';
var MEETING_ASSIGN_ROLE_BUSY_ROLE = '–ù–∞ –∂–∞–ª—å, —Ä–æ–ª—å {0} –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ {1} –≤–∂–µ –∑–∞–π–Ω—è—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É —Ä–æ–ª—å:';
var MEETING_ASSIGN_ROLE_BUSY_DATE = '–ù–∞ –∂–∞–ª—å, —Ä–æ–ª—å {0} –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ {1} –≤–∂–µ –∑–∞–π–Ω—è—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –¥–∞—Ç—É:';
var MEETING_ASSIGN_ROLE_AVAILABLE_ROLES = '–î–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–ª—ñ –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è {0}:';
var MEETING_ASSIGN_ROLE_AVAILABLE_DATES = '–î–æ—Å—Ç—É–ø–Ω—ñ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–ª—ñ {0}:';
var MEETING_ASSIGN_ROLE_SELECT_MEMBER = '–û–±–µ—Ä—ñ—Ç—å —á–ª–µ–Ω–∞ –∫–ª—É–±—É (–∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –¥–ª—è –ø–æ—à—É–∫—É), —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞ —Ä–æ–ª—å?';
var MEETING_ASSIGN_ROLE_SELECT_DATE = '–ù–∞ —è–∫–µ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–∞–ø–∏—Å–∞—Ç–∏?';
var MEETING_ASSIGN_ROLE_SELECT_ROLE = '–Ø–∫—É —Ä–æ–ª—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏?';
var MEETING_ASSIGN_ROLE_SELECT_ROLE_OR_DATE = '–•–æ—á–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Å—ñ–¥–∞–Ω–Ω—è —á–∏ —Ä–æ–ª—å?';

var MEETING_ROLE_INFO_SPEACH_0_DAY = '{0}, –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –≤–∂–µ —Å–∫–æ—Ä–æ, –∞ –≤ –º–µ–Ω–µ –¥–æ—Å—ñ –Ω–µ–º–∞—î <b>{1}</b> –¥–ª—è <b>–≤–∞—à–æ—ó –ø—Ä–æ–º–æ–≤–∏</b>. –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –¥–∞–Ω—ñ —è–∫–æ–º–æ–≥–∞ —Ä–∞–Ω—ñ—à–µ, —â–æ–± —è –º—ñ–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É ‚ò∫';
var MEETING_ROLE_INFO_WORD_OF_THE_DAY_0_DAY = '{0}, –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –≤–∂–µ —Å–∫–æ—Ä–æ, –∞ –≤ –º–µ–Ω–µ –¥–æ—Å—ñ –Ω–µ–º–∞—î <b>–Ω–µ–º–∞—î —Å–ª–æ–≤–∞ –¥–Ω—è</b>. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ —Å–ª–æ–≤–æ –¥–Ω—è —ñ –ø–æ–≤—ñ–¥–æ–º—Ç–µ –º–µ–Ω—ñ üòç';
var MEETING_ROLE_INFO_THEME_0_DAY = '{0}, –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –≤–∂–µ —Å–∫–æ—Ä–æ, –∞ –≤ –º–µ–Ω–µ –¥–æ—Å—ñ <b>–Ω–µ–º–∞—î —Ç–µ–º–∏ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è</b>. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ —Ç–µ–º—É —ñ –ø–æ–≤—ñ–¥–æ–º—Ç–µ –º–µ–Ω—ñ üòç';

var MEETING_ROLES_NOT_ASSIGNED = '–í–∏ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ –∂–æ–¥–Ω—É —Ä–æ–ª—å.';
var MEETING_ROLES_MEMBER_NOT_ASSIGNESD = '{0} –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –∂–æ–¥–Ω—É —Ä–æ–ª—å.';
var MEETING_ROLES_ASSIGNED_TITLE = '<b>–í–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–æ–ª—ñ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞—Å—ñ–¥–∞–Ω–Ω—è—Ö:</b>';
var MEETING_ROLES_ASSIGNED_MEMBER_TITLE = '<b>{0} –∑–∞–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Ä–æ–ª—ñ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞—Å—ñ–¥–∞–Ω–Ω—è—Ö:</b>';
var MEETING_ROLES_ASSIGNED_DATE_TITLE = '<b>{0}:</b>';

var MEETING_ROLES_CONFIRM = '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–æ–ª—ñ –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ';
var MEETING_ROLES_CONFIRM_TITLE = '–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–ª–µ–π –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ <b>{0}</b>';

var MEETING_SHOW_ROLES_SELECT_MEMBER = '–û–±–µ—Ä—ñ—Ç—å —á–ª–µ–Ω–∞ –∫–ª—É–±—É:';

var MEETING_CANCEL_SYMBOL = '*';

var MEETING_CANCEL_REASON_SHORT = '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç–µ–Ω—å–∫—É –ø—Ä–∏—á–∏–Ω—É (2-3, –Ω—É –º–∞–∫—Å–∏–º—É–º 4 —Å–ª–æ–≤–∞ üôÉ), —á–æ–º—É –≤–∏ —Å–∫–∞—Å–æ–≤—É—î—Ç–µ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è:';
var MEETING_CANCEL_REASON_DETAILED = '–¢—É—Ç –º–æ–∂–Ω–∞ –≤–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∫–∞—Å–æ–≤–∞–Ω–µ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è. \
\n\
\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥, —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–Ω–∫—É—Ä—Å (–≥–æ–ª–æ–≤–Ω–∏–π —Å—É–¥–¥—è, —É—á–∞—Å–Ω–∏–∫–∏) –∞–±–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–µ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è.\
\n\
\n\–ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç–µ–≥ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è (b), –∫—É—Ä—Å–∏–≤—É (i), —Ç–∞ —Ç–µ–≥–∏ a, code, pre.\
\n\
\n–ü—ñ–∑–Ω—ñ—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏.';

var MEETING_CANCEL_SUCCESS = '–ó–∞—Å—ñ–¥–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–µ';
var MEETING_CANCEL_REASON_1 = '–ö–æ–Ω–∫—É—Ä—Å –ø—Ä–æ–º–æ–≤';
var MEETING_CANCEL_REASON_2 = '–ö–æ–Ω–∫—É—Ä—Å –≥—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–º–æ–≤';
var MEETING_CANCEL_REASON_3 = '–ö–æ–Ω–∫—É—Ä—Å –µ–∫—Å–ø—Ä–æ–º—Ç-–ø—Ä–æ–º–æ–≤';
var MEETING_CANCEL_KEEP_ROLE = '–í–∫–∞–∂—ñ—Ç—å —Ä–æ–ª—å, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è:';

var MEETING_ROLE_IS_DUPLICATED = '–ù–∞ –∂–∞–ª—å, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–æ–ª—å <b>{0}</b> –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è <b>{1}</b>, —Ç–æ–º—É —â–æ –≤–∏ —ó—ó –≤–∏–∫–æ–Ω—É–≤–∞–ª–∏ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ <b>{2}</b>.\
\n\n–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —ñ–Ω—à—É —Ä–æ–ª—å –∞–±–æ –Ω–∞ <b>{3}</b> –∑–∞—Å—ñ–¥–∞–Ω–Ω—è.';
var MEETING_ROLE_IS_DUPLICATED_FUTURE = '–ù–∞ –∂–∞–ª—å, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–æ–ª—å <b>{0}</b> –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è <b>{1}</b>, —Ç–æ–º—É —â–æ –≤–∏ –±—É–¥–µ—Ç–µ —ó—ó –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ <b>{2}</b>.\
\n\n–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —ñ–Ω—à—É —Ä–æ–ª—å –∞–±–æ –Ω–∞ <b>{3}</b> –∑–∞—Å—ñ–¥–∞–Ω–Ω—è.';

var MEETING_ROLE_REQUEST_SENT = "–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–ª—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ñ—Ü–µ-–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—É –∑ –æ—Å–≤—ñ—Ç–∏!\
                                 \n\n–Ø–∫ —Ç—ñ–ª—å–∫–∏ –≤—ñ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É —É—á–∞—Å—Ç—å —É –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ - –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üòä";

var MEETING_ROLE_REQUEST_BUSY = "–ù–∞ –∂–∞–ª—å, —Ä–æ–ª—å <b>{0}</b> –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ <b>{1}</b> –≤–∂–µ –∑–∞–π–Ω—è—Ç–∞. –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏ <b>{2}</b> –Ω–∞ —Ü—é —Ä–æ–ª—å.";
var MEETING_ROLE_REQUEST_FAILED_NO_MEMBER = "–ù–∞ –∂–∞–ª—å, –Ω–µ –∑–º–æ–≥–ª–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–ª—ñ, —Ç–æ–º—É —â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <b>{0}</b> –≤ –±–∞–∑—ñ.";

var MEETING_ROLE_REQUEST_CONFIRM_MESSAGE = '–í—ñ—Ç–∞—é, {0}!\n\n–ì—ñ—Å—Ç—å <b>{1}</b> –ø—Ä–æ—Å–∏—Ç—å –≤–∞—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –π–æ–≥–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–ª—ñ <b>{2}</b> –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ <b>{3}</b>';

var MEETING_ROLE_REQUEST_CONFIRM_CALLBACK = 'confirm_guest_to_sign_up_to_role';
var MEETING_ROLE_REQUEST_REJECT_CALLBACK = 'reject_guest_to_sign_up_to_role';

var MEETING_ROLE_REQUEST_CONFIRM = 'üëç –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏';
var MEETING_ROLE_REQUEST_REJECT = 'üëé –í—ñ–¥–º–æ–≤–∏—Ç–∏';

var MEETING_ROLE_REQUEST_CONFIRMED = '–í—ñ—Ç–∞—é, {0}!\n\n–í—ñ—Ü–µ-–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –∑ –æ—Å–≤—ñ—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –≤–∞—à –∑–∞–ø–∏—Ç! üòä\n\n–ù–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ <b>{1}</b> –≤–∏ –±—É–¥–µ—Ç–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ä–æ–ª—å <b>{2}</b>.';
var MEETING_ROLE_REQUEST_CONFIRMED_INFO = '–ü–æ–≤—ñ–¥–æ–º–∏–≤ <b>{0}</b>, —â–æ –π–æ–≥–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–ª—ñ <b>{1}</b> –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ <b>{2}</b> –±—É–ª–æ <b>—Å—Ö–≤–∞–ª–µ–Ω–æ üëç</b>.';
var MEETING_ROLE_REQUEST_REJECTED = '–í—ñ—Ç–∞—é, {0}!\n\n–ù–∞ –∂–∞–ª—å, –≤—ñ—Ü–µ-–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –∑ –æ—Å–≤—ñ—Ç–∏ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –≤–∞–º —É –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ —Ä–æ–ª—ñ <b>{1}</b> –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ <b>{2}</b>. –ú–æ–∂–ª–∏–≤–æ, –Ω–∞ —Ü—é —Ä–æ–ª—å –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∏–π —á–ª–µ–Ω –∫–ª—É–±—É. –ó–∞ –¥–µ—Ç–∞–ª—è–º–∏ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≤—ñ—Ü–µ-–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –∫–ª—É–±—É.';
var MEETING_ROLE_REQUEST_REJECTED_INFO = '–ü–æ–≤—ñ–¥–æ–º–∏–≤ <b>{0}</b>, —â–æ –π–æ–≥–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–ª—ñ <b>{1}</b> –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ <b>{2}</b> –±—É–ª–æ <b>–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ üëé</b>.';

/* –ó–ê–ì–û–õ–û–í–ö–ò –ë–ê–ó–ò –î–ê–ù–ù–ò–• */

var MEETING_HEADER_DATE = "–î–∞—Ç–∞";

/* EMOJI –†–û–õ–ï–ô */

var MEETING_ROLE_ICONS = [];
MEETING_ROLE_ICONS[MEETING_ROLE_SPEACH] = "‚Äçüé§";
MEETING_ROLE_ICONS[MEETING_ROLE_SPEACH_TITLE] = "üì∞";
MEETING_ROLE_ICONS[MEETING_ROLE_SPEACH_PROJECT] = "üìë";
MEETING_ROLE_ICONS[MEETING_ROLE_EVALUATION] = "üç¨";
MEETING_ROLE_ICONS[MEETING_ROLE_TOASTMASTER] = "ü§µ";
MEETING_ROLE_ICONS[MEETING_ROLE_AH_COUNTER] = "üêû";
MEETING_ROLE_ICONS[MEETING_ROLE_TIMER] = "üïê";
MEETING_ROLE_ICONS[MEETING_ROLE_GRAMMARIAN] = "üéì";
MEETING_ROLE_ICONS[MEETING_ROLE_SPEAKER_ADVICE] = "üìú";
MEETING_ROLE_ICONS[MEETING_ROLE_LIBRARIAN] = "üìö";
MEETING_ROLE_ICONS[MEETING_ROLE_TABLE_TOPIC_MASTER] = "üï∫";
MEETING_ROLE_ICONS[MEETING_ROLE_TABLE_TOPIC_EVALUATOR] = "üç≠";
MEETING_ROLE_ICONS[MEETING_ROLE_GENERAL_EVALUATOR] = "üèÄ";

MEETING_ROLE_ICONS[MEETING_WORD_OF_THE_DAY] = "üí¨";
MEETING_ROLE_ICONS[MEETING_THEME] = "üí°";

function showMeetingProgram(userTelegramId, date) {
    var roles = getMeetingProgramRoles(date);

    var about = '';
    var theme = '';
    var wordOfTheDay = '';

    var message = MEETING_PROGRAM_TITLE_1 + '\n\n' + format(MEETING_PROGRAM_TITLE_2, date) + '\n\n';

    for (var i = 0; i < roles.length; i++) {
        var role = roles[i];
        var member = (role.member) ? role.member : MEETING_PROGRAM_ROLE_NO_MEMBER;
        if (member && member[0] == MEETING_CANCEL_SYMBOL) {} else {
            if (role.name.indexOf(MEETING_ABOUT) > -1) {
                about = role.member;
                continue;
            }

            if (role.name.indexOf(MEETING_THEME) > -1) {
                theme = role.member;
                continue;
            }

            if (role.name.indexOf(MEETING_WORD_OF_THE_DAY) > -1) {
                wordOfTheDay = role.member;
                continue;
            }

            if (!role.speachTitle) {
                var icon = MEETING_ROLE_ICONS[role.name];
                if (role.name.indexOf(MEETING_ROLE_SPEACH) > -1) icon = MEETING_ROLE_ICONS[MEETING_ROLE_SPEACH];
                if (role.name.indexOf(MEETING_ROLE_EVALUATION) > -1) icon = MEETING_ROLE_ICONS[MEETING_ROLE_EVALUATION];
                message += icon + " " + format(MEETING_PROGRAM_ROLE_INFO, role.name, member);
            } else {
                var icon = MEETING_ROLE_ICONS[MEETING_ROLE_SPEACH];
                if (role.speachProject && role.speachProject != MEETING_SPEACH_PROJECT_EMPTY) {
                    message += icon + " " + format(MEETING_PROGRAM_ROLE_SPEACH_INFO_WITH_PROJECT, role.name, role.speachTitle, role.speachProject, role.member);
                } else {
                    message += icon + " " + format(MEETING_PROGRAM_ROLE_SPEACH_INFO_NO_PROJECT, role.name, role.speachTitle, role.member);
                }
            }
        }
    }

    if (about) {
        message += format('{0}\n\n', about);
    }

    if (theme) {
        message += format('<b>{0}:</b> {1}\n', MEETING_THEME, theme);
    }

    if (wordOfTheDay) {
        message += format('<b>{0}:</b> {1}', MEETING_WORD_OF_THE_DAY, wordOfTheDay);
    }

    showMenu(userTelegramId, message);
    return true;
}

function processSignUpForRole(userData, text) {
    if (userData.statuses[2]) {
        if (userData.statuses[2] == MEETING_SIGN_UP_DATE) {
            if (userData.statuses[3]) {
                if (!userData.statuses[4]) {
                    var roleDuplicatesInfo = isRoleDuplicated(userData.fullName, parseDate(userData.statuses[3]), text);
                    if (!roleDuplicatesInfo) {
                        var enoughSpeechesSaid = isEnoughAmountOfSpeeches(userData.fullName, text, userData.statuses[3]);
                        if (enoughSpeechesSaid) {
                            var isUserAGuest = (userData.fields[MEMBERS_HEADER_STATUS] == MEMBERS_STATUS_GUEST) ? true : false;
                            if (!isUserAGuest) {
                                if (tryToUpdateMeetingInfo(userData.statuses[3], text, userData.fullName)) {
                                    showMenu(userData.telegramId, format(MEETING_SIGN_UP_SUCCESS, text, userData.statuses[3]));
                                } else {
                                    showMenu(userData.telegramId, format(MEETING_SIGN_UP_ROLES_BUSY, text, userData.statuses[3]), getMeetingRoles(userData.statuses[3]));
                                }
                                return true;
                            } else {
                                showMenu(userData.telegramId, MEETING_ROLE_REQUEST_SENT);
                                askVPEducationToConfirmRole(userData, userData.statuses[3], text);
                                return false;
                            }
                        } else {
                            showMenu(userData.telegramId, MEETING_ROLE_REQUEST_SENT);
                            askVPEducationToConfirmRole(userData, userData.statuses[3], text);
                            return false;
                        }
                    } else {
                        var message = roleDuplicatesInfo.isFuture ?
                            format(MEETING_ROLE_IS_DUPLICATED_FUTURE, text, userData.statuses[3], roleDuplicatesInfo.date, roleDuplicatesInfo.availableDate) :
                            format(MEETING_ROLE_IS_DUPLICATED, text, userData.statuses[3], roleDuplicatesInfo.date, roleDuplicatesInfo.availableDate);

                        showMenu(userData.telegramId, message, getMeetingRoles(userData.statuses[3]));
                        return false;
                    }
                }
            } else {
                var foundRoles = getSignedRolesInSelectedMeeting(userData.fullName, text);

                if (foundRoles == null) {
                    sendText(userData.telegramId, format(MEETING_NOT_FOUND, formatDate(parseDate(text))));
                    return false;
                }

                if (foundRoles) {
                    var listOfSignedRoles = "";

                    for (var key in foundRoles) {
                        listOfSignedRoles += key + ', ';
                    }
                    listOfSignedRoles = listOfSignedRoles.substring(0, listOfSignedRoles.length - 2);

                    sendText(userData.telegramId, format(MEETING_SIGN_UP_ROLE_REJECTED, formatDate(parseDate(text)), listOfSignedRoles));
                    return false;
                } else {
                    showMenu(userData.telegramId, format(MEETING_SIGN_UP_ROLES_AVAILABLE, text), getMeetingRoles(text));
                    return true;
                }
            }
        } else if (userData.statuses[2] == MEETING_SIGN_UP_ROLE) {
            if (userData.statuses[3]) {
                if (!userData.statuses[4]) {
                    var foundRoles = getSignedRolesInSelectedMeeting(userData.fullName, text);

                    if (foundRoles == null) {
                        sendText(userData.telegramId, format(MEETING_NOT_FOUND, formatDate(text)));
                        return false;
                    }

                    if (foundRoles) {
                        var listOfSignedRoles = "";

                        for (var key in foundRoles) {
                            listOfSignedRoles += key + ', ';
                        }
                        listOfSignedRoles = listOfSignedRoles.substring(0, listOfSignedRoles.length - 2);

                        sendText(userData.telegramId, format(MEETING_SIGN_UP_ROLE_REJECTED, formatDate(parseDate(text)), listOfSignedRoles));
                        return false;
                    } else {
                        var roleDuplicatesInfo = isRoleDuplicated(userData.fullName, text, userData.statuses[3]);
                        if (!roleDuplicatesInfo) {
                            var enoughSpeechesSaid = isEnoughAmountOfSpeeches(userData.fullName, userData.statuses[3], text);
                            if (enoughSpeechesSaid) {
                                var isUserAGuest = (userData.fields[MEMBERS_HEADER_STATUS] == MEMBERS_STATUS_GUEST) ? true : false;
                                if (!isUserAGuest) {
                                    if (tryToUpdateMeetingInfo(text, userData.statuses[3], userData.fullName)) {
                                        showMenu(userData.telegramId, format(MEETING_SIGN_UP_SUCCESS, userData.statuses[3], text));
                                    } else {
                                        showMenu(userData.telegramId, format(MEETING_SIGN_UP_DATE_BUSY, userData.statuses[3], text), getAvailableRoleDates(userData.statuses[3]));
                                    }
                                    return true;
                                } else {
                                    showMenu(userData.telegramId, MEETING_ROLE_REQUEST_SENT);
                                    askVPEducationToConfirmRole(userData, text, userData.statuses[3]);
                                    return false;
                                }
                            } else {
                                showMenu(userData.telegramId, MEETING_ROLE_REQUEST_SENT);
                                askVPEducationToConfirmRole(userData, text, userData.statuses[3]);
                                return false;
                            }
                        } else {
                            var message = roleDuplicatesInfo.isFuture ?
                                format(MEETING_ROLE_IS_DUPLICATED_FUTURE, text, userData.statuses[3], roleDuplicatesInfo.date, roleDuplicatesInfo.availableDate) :
                                format(MEETING_ROLE_IS_DUPLICATED, text, userData.statuses[3], roleDuplicatesInfo.date, roleDuplicatesInfo.availableDate);

                            showMenu(userData.telegramId, message, getMeetingRoles( /*userData.statuses[3]*/ text));
                            return false;
                        }
                    }
                }
            } else {
                showMenu(userData.telegramId, format(MEETING_SIGN_UP_DATE_AVAILABLE, text), getAvailableRoleDates(text));
                return true;
            }
        }
    } else {
        if (text == MEETING_SIGN_UP_DATE) {
            showMenu(userData.telegramId, MEETING_SIGN_UP_DATE_REQUEST,
                getNextMeetingDates(SIGN_UP_FOR_NEXT_MEETINGS_AMOUNT));
            return true;
        } else if (text == MEETING_SIGN_UP_ROLE) {
            showMenu(userData.telegramId, MEETING_SIGN_UP_ROLE_REQUEST,
                getMeetingRoles());
            return true;
        }
    }
}

function processAssignRole(userData, text) {
    if (userData.statuses[3]) {
        if (userData.statuses[3] == MEETING_SIGN_UP_DATE) {
            if (userData.statuses[4]) {
                if (userData.statuses[5]) {
                    if (!userData.statuses[6]) {
                        if (tryToUpdateMeetingInfo(userData.statuses[4], text, userData.statuses[5])) {
                            var memberInfo = getMemberInfo(MEMBERS_HEADER_FULLNAME, userData.statuses[5]);
                            if (memberInfo) {
                                var callName = memberInfo.callName || memberInfo.name;
                                sendText(memberInfo.telegramId, format(MEETING_ASSIGN_ROLE_SUCCESS_MEMBER, callName, userData.statuses[4], text));
                            }
                            showMenu(userData.telegramId, format(MEETING_ASSIGN_ROLE_SUCCESS, userData.statuses[5], text, userData.statuses[4]));
                        } else {
                            showMenu(userData.telegramId, format(MEETING_ASSIGN_ROLE_BUSY_ROLE, text, userData.statuses[4]), getMeetingRoles(userData.statuses[4], true));
                        }
                        return true;
                    }
                } else {
                    return searchMemberInDatabase(text, userData.telegramId, format(MEETING_ASSIGN_ROLE_AVAILABLE_ROLES, userData.statuses[4]), getMeetingRoles(userData.statuses[4], true));
                }
            } else {
                showMenu(userData.telegramId, MEETING_ASSIGN_ROLE_SELECT_MEMBER, getAllMembers());
                return true;
            }
        } else if (userData.statuses[3] == MEETING_SIGN_UP_ROLE) {
            if (userData.statuses[4]) {
                if (userData.statuses[5]) {
                    if (!userData.statuses[6]) {
                        if (tryToUpdateMeetingInfo(text, userData.statuses[4], userData.statuses[5])) {
                            showMenu(userData.telegramId, format(MEETING_ASSIGN_ROLE_SUCCESS, userData.statuses[5], userData.statuses[4], text));
                        } else {
                            showMenu(userData.telegramId, format(MEETING_ASSIGN_ROLE_BUSY_DATE, userData.statuses[4], text), getAvailableRoleDates(userData.statuses[4], true));
                        }
                        return true;
                    }
                } else {
                    return searchMemberInDatabase(text, userData.telegramId, format(MEETING_ASSIGN_ROLE_AVAILABLE_DATES, userData.statuses[4]), getAvailableRoleDates(userData.statuses[4], true));
                }
            } else {
                showMenu(userData.telegramId, MEETING_ASSIGN_ROLE_SELECT_MEMBER, getAllMembers());
                return true;
            }
        }
    } else {
        if (text == MEETING_SIGN_UP_DATE) {
            showMenu(userData.telegramId, MEETING_ASSIGN_ROLE_SELECT_DATE,
                getNextMeetingDates(SIGN_UP_FOR_NEXT_MEETINGS_AMOUNT));
            return true;
        } else if (text == MEETING_SIGN_UP_ROLE) {
            showMenu(userData.telegramId, MEETING_ASSIGN_ROLE_SELECT_ROLE,
                getMeetingRoles());
            return true;
        }
    }
}

function processMeeting(userData, text) {
    if (userData.statuses[1]) {
        if (userData.statuses[1] == MEETING_SIGN_UP_FOR_ROLE) {
            return processSignUpForRole(userData, text);
        } else if (userData.statuses[1] == MEETING_SHOW_PROGRAM) {
            if (!userData.statuses[2]) {
                return showMeetingProgram(userData.telegramId, text);
            }
        }
    } else {
        if (text == MEETING_SIGN_UP_FOR_ROLE) {
            showMenu(userData.telegramId, MEETING_SIGN_UP_SELECT_ROLE_OR_DATE, [MEETING_SIGN_UP_DATE, MEETING_SIGN_UP_ROLE]);
            return true;
        } else if (text == MEETING_SHOW_MY_ROLES) {
            showSignedRoles(userData.telegramId, userData.fullName, true);
            return false;
        } else if (text == MEETING_SHOW_PROGRAM) {
            showMenu(userData.telegramId, MEETING_PROGRAM_CHOOSE_DATE, getNextMeetingDates(SIGN_UP_FOR_NEXT_MEETINGS_AMOUNT));
            return true;
        }
    }
}

function processCancelMeeting(userData, text) {
    if (userData.statuses[3]) {
        if (userData.statuses[4]) {
            if (!userData.statuses[5]) {
                var date = userData.statuses[3];
                var reasonShort = (userData.statuses[4] != EMPTY) ? userData.statuses[4] : '';
                var reasonDetailed = (text != EMPTY) ? text : '';
                if (!reasonDetailed) reasonDetailed = reasonShort;

                cancelMeeting(date, reasonShort);
                tryToUpdateMeetingInfo(date, MEETING_ABOUT, reasonDetailed);
                showMenu(userData.telegramId, MEETING_CANCEL_SUCCESS);

                return true;
            }
        } else {
            showMenu(userData.telegramId, MEETING_CANCEL_REASON_DETAILED, [EMPTY]);
            return true;
        }
    } else {
        showMenu(userData.telegramId, MEETING_CANCEL_REASON_SHORT, [EMPTY, MEETING_CANCEL_REASON_1, MEETING_CANCEL_REASON_2, MEETING_CANCEL_REASON_3]);
        return true;
    }
}

function processMeetingManagement(userData, text) {
    if (userData.statuses[2]) {
        if (userData.statuses[2] == MEETING_SHOW_ROLES) {
            var result = searchMemberInDatabase(text, userData.telegramId, null, null);
            if (result) {
                return showSignedRoles(userData.telegramId, text, false);
            } else {
                return false;
            }
        } else if (userData.statuses[2] == MEETING_ASSIGN_ROLE) {
            return processAssignRole(userData, text);
        } else if (userData.statuses[2] == MEETING_CANCEL) {
            return processCancelMeeting(userData, text);
        } else if (userData.statuses[2] == MEETING_SHOW_PROGRAM && !userData.statuses[3]) {
            showMeetingProgramAndCallbacks(userData.telegramId, text);
            return true;
        } else if (userData.statuses[2] == MEETING_EDIT) {
            return processEditMeeting(userData, text);
        }
    } else {
        if (text == MEETING_ASSIGN_ROLE) {
            showMenu(userData.telegramId, MEETING_ASSIGN_ROLE_SELECT_ROLE_OR_DATE, [MEETING_SIGN_UP_DATE, MEETING_SIGN_UP_ROLE]);
            return true;
        } else if (text == MEETING_SHOW_ROLES) {
            showMenu(userData.telegramId, MEETING_SHOW_ROLES_SELECT_MEMBER, getAllMembers());
            return true;
        } else if (text == MEETING_CANCEL) {
            showMenu(userData.telegramId, MEETING_CANCEL_CHOOSE_DATE, getNextMeetingDates(SIGN_UP_FOR_NEXT_MEETINGS_AMOUNT));
            return true;
        } else if (text == MEETING_EDIT) {
            showMenu(userData.telegramId, MEETING_EDIT_CHOOSE_DATE, getNextMeetingDates(SIGN_UP_FOR_NEXT_MEETINGS_AMOUNT));
            return true;
        } else if (text == MEETING_SHOW_PROGRAM) {
            showMenu(userData.telegramId, MEETING_PROGRAM_CHOOSE_DATE, getNextMeetingDates(SIGN_UP_FOR_NEXT_MEETINGS_AMOUNT));
            return true;
        }
    }
}

function processEditMeeting(userData, text) {
    const dateIndexInStatuses = 3;
    var statusesIndexToStart = (userData.statuses[2] == MEETING_SHOW_PROGRAM) ? dateIndexInStatuses + 1 : dateIndexInStatuses;
    var fieldIndexInStatuses = statusesIndexToStart + 1;

    if (userData.statuses[statusesIndexToStart]) {
        if (userData.statuses[statusesIndexToStart + 1]) {
            if (!userData.statuses[statusesIndexToStart + 2]) {
                var date = userData.statuses[dateIndexInStatuses];
                var field = userData.statuses[fieldIndexInStatuses];
                var value = removeTemplateTextBelow(text);
                if (updateMeetingInfo(date, field, value, false)) {
                    showMenu(userData.telegramId, MEETING_EDIT_SUCCESS);
                } else {
                    showMenu(userData.telegramId, MEETING_EDIT_FAILED);
                }
            }
        } else {
            if (text == MEETING_ABOUT) {
                var text = getMeetingInfo(userData.statuses[dateIndexInStatuses], MEETING_ABOUT);
                showMenu(userData.telegramId, MEETING_EDIT_ABOUT_1);
                sendText(userData.telegramId, MEETING_EDIT_ABOUT_2, '{"inline_keyboard":[[ {"text": "' + MEETING_ABOUT_CURRENT_TEXT + '", "switch_inline_query_current_chat" : "' + TEMPLATE_TEXT_BELOW + text + '"}]] }');
                return true;
            } else if (text == MEETING_THEME) {
                showMenu(userData.telegramId, MEETING_EDIT_THEME);
                return true;
            } else if (text == MEETING_WORD_OF_THE_DAY) {
                showMenu(userData.telegramId, MEETING_EDIT_WORD_OF_THE_DAY);
                return true;
            }
        }
    } else {
        showMenu(userData.telegramId, MEETING_EDIT_SELECT, [MEETING_ABOUT, MEETING_THEME, MEETING_WORD_OF_THE_DAY]);
        return true;
    }
}

/* –û–ü–ï–†–ê–¶–Ü–á */

function askVPEducationToConfirmRole(userData, meetingDate, roleName) {

    var vpEducation = getMemberInfo(MEMBERS_HEADER_POSITION, OFFICER_POSITION_VP_EDUCATION);
    var roleMember = userData.fullName;
    var callbacksToInsert = [];

    var callbackData = MEETING_ROLE_REQUEST_CONFIRM_CALLBACK + '___' + meetingDate + '___' + roleName + '___' + roleMember;
    var callbackId = (new Date()).getTime();
    var time = callbackId;
    var keyBoard = [{
        text: MEETING_ROLE_REQUEST_CONFIRM,
        callback: callbackId
    }];

    callbacksToInsert.push([callbackId, time, callbackData]);

    callbackData = MEETING_ROLE_REQUEST_REJECT_CALLBACK + '___' + meetingDate + '___' + roleName + '___' + roleMember;
    callbackId = (new Date()).getTime() + 3;
    time = callbackId;

    callbacksToInsert.push([callbackId, time, callbackData]);

    keyBoard.push({
        text: MEETING_ROLE_REQUEST_REJECT,
        callback: callbackId
    });

    sendText(vpEducation.telegramId, format(MEETING_ROLE_REQUEST_CONFIRM_MESSAGE, vpEducation.callName, roleMember, roleName, meetingDate), getMenuInlineKeyBoardMultiline(keyBoard));
    insertCallbacks(callbacksToInsert);
}

/* –§–£–ù–ö–¶–Ü–á */

function getLastMeetingDate() {
    var date = new Date();
    var day = date.getDay();
    var prevMonday;
    if (date.getDay() == MEETING_ON_WEEK_DAY) {
        return date;
    }
    return new Date(new Date().setDate(date.getDate() - ((date.getDay() + (7 - MEETING_ON_WEEK_DAY)) % 7)));
}

// day: 0=Sunday, 1=Monday...4=Thursday...
function getNextMeetingDate() {
    var now = new Date;
    var result = new Date(
        now.getFullYear(),
        now.getMonth(),
        now.getDate() + (7 + MEETING_ON_WEEK_DAY - now.getDay()) % 7, MEETING_TIME, 0);

    result = new Date(result.getTime() + MEETING_DURATION_MINUTES * 60000);

    if (result <= now) {
        result.setDate(result.getDate() + 7)
    }
    return result;
}

/* –°–ü–û–í–Ü–©–ï–ù–ù–Ø */

function checkProgramBeforeMeeting() {
    var date = new Date();
    var currentDate = parseDate(formatDate(date));
    var nextMeetingDate = getNextMeetingDate();

    const diffTime = Math.abs(nextMeetingDate - currentDate);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) - 1;

    if (!(diffDays == 0 && date.getHours() >= 9 && date.getHours() <= MEETING_TIME)) {
        //return;
    }

    var roles = getMeetingProgramRoles(nextMeetingDate);

    var meetingTheme = '';

    for (var i = 0; i < roles.length; i++) {
        var role = roles[i];
        var roleMember = role.member;
        var roleName = role.name;
        var shortRoleName = roleName;
        var isSpeach = false;

        if (role.name && role.name.indexOf(MEETING_ROLE_TOASTMASTER) > -1) {
            meetingTheme = role.theme;
        }

        if (roleMember) {
            if (roleName.indexOf(MEETING_ROLE_SPEACH) > -1) {
                shortRoleName = MEETING_ROLE_SPEACH;
                isSpeach = true;
            } else if (roleName.indexOf(MEETING_ROLE_EVALUATION) > -1) {
                shortRoleName = MEETING_ROLE_EVALUATION;
            }
            var memberInfo = getMemberInfo(MEMBERS_HEADER_FULLNAME, roleMember);
            if (!memberInfo || !memberInfo.telegramId) continue;
            var callName = memberInfo.callName || memberInfo.name;

            if (isSpeach) {
                if (!role.speachProject || !role.speachTitle) {
                    var titleProject = '';
                    if (!role.speachTitle) titleProject += MEETING_ROLE_SPEACH_TITLE + ', ';
                    if (!role.speachProject) titleProject += MEETING_ROLE_SPEACH_PROJECT;
                    if (titleProject[titleProject.length - 2] == ',') titleProject = titleProject(0, roles.length - 2);

                    sendText(memberInfo.telegramId, format(MEETING_ROLE_INFO_SPEACH_0_DAY, callName, titleProject));

                    if (!role.speachTitle) {
                        askForRoleDetails(memberInfo.telegramId, MEETING_SPEACH_CHANGE_TITLE_CALLBACK, MEETING_SPEACH_CHANGE_TITLE, MEETING_SPEACH_NO_TITLE,
                            date, roleName, roleMember);
                    }
                    if (!role.speachProject) {
                        askForRoleDetails(memberInfo.telegramId, MEETING_SPEACH_CHANGE_PROJECT_CALLBACK, MEETING_SPEACH_CHANGE_PROJECT, MEETING_SPEACH_NO_PROJECT,
                            date, roleName, roleMember);
                    }
                }
            } else if (roleName.indexOf(MEETING_ROLE_TOASTMASTER) > -1) {
                if (!role.theme) {
                    sendText(memberInfo.telegramId, format(MEETING_ROLE_INFO_THEME_0_DAY, callName));                
                    askForRoleDetails(memberInfo.telegramId, MEETING_CHANGE_THEME_CALLBACK, MEETING_CHANGE_THEME, MEETING_NO_THEME,
                        date, roleName, roleMember);
                }
            } else if (roleName.indexOf(MEETING_ROLE_GRAMMARIAN) > -1) {
                if (!role.wordOfTheDay) {
                    sendText(memberInfo.telegramId, format(MEETING_ROLE_INFO_WORD_OF_THE_DAY_0_DAY, callName));
                    askForRoleDetails(memberInfo.telegramId, MEETING_CHANGE_WORD_OF_THE_DAY_CALLBACK, MEETING_CHANGE_WORD_OF_THE_DAY, MEETING_NO_WORD_OF_THE_DAY,
                        date, roleName, roleMember);
                }
            }
        }
    }
}

function sendMeetingNotifications() {
    var currentDate = parseDate(formatDate(new Date()));
    var date = getNextMeetingDate();

    const diffTime = Math.abs(date - currentDate);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) - 1;

    if (diffDays != 1 && diffDays != 6) {
        return;
    }

    var roles = getMeetingProgramRoles(date);

    var meetingTheme = '';

    for (var i = 0; i < roles.length; i++) {
        var role = roles[i];
        var roleMember = role.member;
        var roleName = role.name;
        var shortRoleName = roleName;
        var isSpeach = false;

        if (role.name && role.name.indexOf(MEETING_ROLE_TOASTMASTER) > -1) {
            meetingTheme = role.theme;
        }

        if (roleMember) {
            if (roleName.indexOf(MEETING_ROLE_SPEACH) > -1) {
                shortRoleName = MEETING_ROLE_SPEACH;
                isSpeach = true;
            } else if (roleName.indexOf(MEETING_ROLE_EVALUATION) > -1) {
                shortRoleName = MEETING_ROLE_EVALUATION;
            }
            var memberInfo = getMemberInfo(MEMBERS_HEADER_FULLNAME, roleMember);
            if (!memberInfo || !memberInfo.telegramId) continue;
            var callName = memberInfo.callName || memberInfo.name;


            var notificationText = diffDays > 1 ? MEETING_ROLE_INFO_7_DAY[shortRoleName] : MEETING_ROLE_INFO_1_DAY[shortRoleName];
            sendText(memberInfo.telegramId, format(notificationText, callName, formatDate(date), shortRoleName));

            if (isSpeach) {
                if (!role.speachProject) {
                    askForRoleDetails(memberInfo.telegramId, MEETING_SPEACH_CHANGE_PROJECT_CALLBACK, MEETING_SPEACH_CHANGE_PROJECT, MEETING_SPEACH_NO_PROJECT,
                        date, roleName, roleMember);
                } else {
                    askForRoleDetails(memberInfo.telegramId, MEETING_SPEACH_CHANGE_PROJECT_CALLBACK, MEETING_SPEACH_CHANGE_PROJECT, format(MEETING_SPEACH_CONFIRM_PROJECT, role.speachProject),
                        date, roleName, roleMember);
                }

                if (!role.speachTitle) {
                    askForRoleDetails(memberInfo.telegramId, MEETING_SPEACH_CHANGE_TITLE_CALLBACK, MEETING_SPEACH_CHANGE_TITLE, MEETING_SPEACH_NO_TITLE,
                        date, roleName, roleMember);
                } else {
                    askForRoleDetails(memberInfo.telegramId, MEETING_SPEACH_CHANGE_TITLE_CALLBACK, MEETING_SPEACH_CHANGE_TITLE, format(MEETING_SPEACH_CONFIRM_TITLE, role.speachTitle),
                        date, roleName, roleMember);
                }
            } else if (roleName.indexOf(MEETING_ROLE_TOASTMASTER) > -1) {
                if (role.theme) {
                    sendText(memberInfo.telegramId, format('{0} <b>{1}</b>: {2}', MEETING_ROLE_ICONS[MEETING_THEME], MEETING_THEME, role.theme));
                } else {
                    askForRoleDetails(memberInfo.telegramId, MEETING_CHANGE_THEME_CALLBACK, MEETING_CHANGE_THEME, MEETING_NO_THEME,
                        date, roleName, roleMember);
                }
            } else if (roleName.indexOf(MEETING_ROLE_GRAMMARIAN) > -1) {
                if (role.wordOfTheDay) {
                    sendText(memberInfo.telegramId, format('{0} <b>{1}</b>: {2}', MEETING_ROLE_ICONS[MEETING_WORD_OF_THE_DAY], MEETING_WORD_OF_THE_DAY, role.wordOfTheDay));
                } else {
                    askForRoleDetails(memberInfo.telegramId, MEETING_CHANGE_WORD_OF_THE_DAY_CALLBACK, MEETING_CHANGE_WORD_OF_THE_DAY, MEETING_NO_WORD_OF_THE_DAY,
                        date, roleName, roleMember);
                }
            } else if (roleName.indexOf(MEETING_ROLE_TABLE_TOPIC_MASTER) > -1) {
                if (meetingTheme) {
                    sendText(memberInfo.telegramId, format('{0} <b>{1}</b>: {2}', MEETING_ROLE_ICONS[MEETING_THEME], MEETING_THEME, meetingTheme));
                }
            }
        }
    }
}

function askForRoleDetails(telegramId, callbackName, callbackText, callbackMessage, date, roleName, roleMember) {
    var callbackData = callbackName + '___' + formatDate(date) + '___' + roleName + '___' + roleMember;
    var callbackId = inseertCallback(callbackData);
    var keyBoard = [{
        text: callbackText,
        callback: callbackId
    }];

    sendText(telegramId, callbackMessage, getMenuInlineKeyBoardMultiline(keyBoard));
}

/* –†–û–ë–û–¢–ê –ó –ë–ê–ó–û–Æ */

function tryToUpdateMeetingInfo(date, setHeader, setValue) {
    if (setHeader == MEETING_ROLE_SPEACH || setHeader == MEETING_ROLE_EVALUATION) {
        for (var i = 1; i <= 4; i++) {
            if (updateMeetingInfo(date, setHeader + " ‚Ññ" + i, setValue, true)) {
                return true;
            }
        }
        return false;
    }

    return updateMeetingInfo(date, setHeader, setValue, true)
}


function cancelMeeting(date, reason) {
    var sheet = SpreadsheetApp.openById(databaseSpreadSheetId).getSheetByName(SHEET_MEETINGS);
    var headerValues = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];

    var dateColumnIndex = headerValues.findIndex(MEETING_HEADER_DATE) + 1;
    var toastmasterColumnIndex = headerValues.findIndex(MEETING_ROLE_TOASTMASTER);

    var dateValues = sheet.getRange(2, dateColumnIndex, sheet.getLastRow(), 1).getValues();
    var dateRowIndex = -1;

    for (var i = 0; i < dateValues.length; i++) {
        var date2 = new Date(dateValues[i]);
        var date1 = typeof date.getMonth === 'function' ? date : parseDate(date);

        if (date1.getYear() == date2.getYear() &&
            date1.getMonth() == date2.getMonth() &&
            date1.getDate() == date2.getDate()) {
            dateRowIndex = i;
            break;
        }
    }

    if (dateRowIndex > -1) {
        var lastColumnIndex = sheet.getLastColumn();
        for (var i = toastmasterColumnIndex; i < headerValues.length; i++) {
            var columnIndex = i + 1;
            var memberFullName = sheet.getRange(dateRowIndex + 2, columnIndex).getValue();
            var role = headerValues[i];

            if (role.indexOf(MEETING_ROLE_SPEACH_TITLE) > -1 ||
                role.indexOf(MEETING_ROLE_SPEACH_PROJECT) > -1 ||
                role.indexOf(MEETING_WORD_OF_THE_DAY) > -1 ||
                role.indexOf(MEETING_THEME) > -1) {
                sheet.getRange(dateRowIndex + 2, columnIndex).setValue('');
            } else {
                if (memberFullName) {
                    var memberInfo = getMemberInfo(MEMBERS_HEADER_FULLNAME, memberFullName);
                    sendMemberCanceledRoleMessage(memberInfo, date, role);
                }
                sheet.getRange(dateRowIndex + 2, columnIndex).setValue(MEETING_CANCEL_SYMBOL + reason);
            }
        }
    }
}

function updateMeetingInfo(date, setHeader, setValue, updateOnlyIfFree) {
    var sheet = SpreadsheetApp.openById(databaseSpreadSheetId).getSheetByName(SHEET_MEETINGS);
    var headerValues = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];

    var dateColumnIndex = headerValues.findIndex(MEETING_HEADER_DATE) + 1;
    var setColumnIndex = headerValues.findIndex(setHeader) + 1;

    if (setColumnIndex == 0) {
        return false;
    }

    var dateValues = sheet.getRange(2, dateColumnIndex, sheet.getLastRow(), 1).getValues();
    var dateRowIndex = -1;

    var oneWeekAgo = new Date();
    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

    for (var i = 0; i < dateValues.length; i++) {
        var date2 = new Date(dateValues[i]);

        if (date2 < oneWeekAgo) {
            continue;
        }

        var date1 = typeof date.getMonth === 'function' ? date : parseDate(date);

        if (date1.getYear() == date2.getYear() &&
            date1.getMonth() == date2.getMonth() &&
            date1.getDate() == date2.getDate()) {
            dateRowIndex = i;
            break;
        }
    }

    if (dateRowIndex > -1) {
        var value = sheet.getRange(dateRowIndex + 2, setColumnIndex).getValue();
        if (!updateOnlyIfFree || !value || (value && value[0] == MEETING_CANCEL_SYMBOL)) {
            sheet.getRange(dateRowIndex + 2, setColumnIndex).setValue(setValue);
            return true;
        } else {
            return false;
        }
    }
}

function getMeetingProgramRoles(date) {
    var sheet = SpreadsheetApp.openById(databaseSpreadSheetId).getSheetByName(SHEET_MEETINGS);

    var headerValues = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    var toastmasterColumnIndex = headerValues.findIndex(MEETING_ROLE_TOASTMASTER) + 1;
    var dateColumnIndex = headerValues.findIndex(MEETING_HEADER_DATE) + 1;
    var rolesValues = [];

    var values = sheet.getRange(1, dateColumnIndex, sheet.getLastRow(), sheet.getLastColumn()).getValues();
    var meetingDate = parseDate(date);
    var roles = [];

    var wordOfTheDay = '';
    var meetingTheme = '';
    var meetingAbout = '';

    var toastmasterRole = null;
    var grammarianRole = null;

    for (var i = 0; i < values.length; i++) {
        var row = values[i];

        var parsedDate = parseDate(row[0]);

        if (meetingDate.getYear() == parsedDate.getYear() &&
            meetingDate.getMonth() == parsedDate.getMonth() &&
            meetingDate.getDate() == parsedDate.getDate()) {

            for (var k = 1; k < row.length; k++) {
                var role = {};
                role.name = values[0][k];
                role.member = row[k] ? row[k] : '';

                if (role.name.indexOf(MEETING_ROLE_SPEACH_PROJECT) > -1 ||
                    role.name.indexOf(MEETING_ROLE_SPEACH_TITLE) > -1) {
                    //MEETING_ABOUT
                    //MEETING_WORD_OF_THE_DAY
                    //MEETING_THEME
                    continue;
                }

                if (role.name.indexOf(MEETING_ROLE_TOASTMASTER) > -1) {
                    toastmasterRole = role;
                }

                if (role.name.indexOf(MEETING_ROLE_GRAMMARIAN) > -1) {
                    grammarianRole = role;
                }

                if (role.name.indexOf(MEETING_THEME) > -1) {
                    toastmasterRole.theme = role.member;
                }

                if (role.name.indexOf(MEETING_WORD_OF_THE_DAY) > -1) {
                    grammarianRole.wordOfTheDay = role.member;
                }

                if (role.name.indexOf(MEETING_ROLE_SPEACH) > -1) {
                    role.speachProject = row[k + 1];
                    role.speachTitle = row[k + 2];
                }

                if (role.name) {
                    roles.push(role);
                }
            }

            break;
        }
    }

    return roles;
}

function getMeetingRoles(date, showCanceledRoles) {
    var sheet = SpreadsheetApp.openById(databaseSpreadSheetId).getSheetByName(SHEET_MEETINGS);

    var headerValues = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    var toastmasterColumnIndex = headerValues.findIndex(MEETING_ROLE_TOASTMASTER) + 1;
    var dateColumnIndex = headerValues.findIndex(MEETING_HEADER_DATE) + 1;
    var rolesValues = [];

    headerValues = sheet.getRange(1, toastmasterColumnIndex, 1, sheet.getLastColumn()).getValues()[0];

    // If date is not valid - show all available roles
    if (date) {
        var dateValues = sheet.getRange(2, dateColumnIndex, sheet.getLastRow(), 1).getValues();
        var dateRowIndex = -1;

        for (var i = dateValues.length - 1; i >= 0; i--) {
            var date1 = typeof date.getMonth === 'function' ? date : parseDate(date);
            var date2 = new Date(dateValues[i]);
            if (date1.getYear() == date2.getYear() &&
                date1.getMonth() == date2.getMonth() &&
                date1.getDate() == date2.getDate()) {
                dateRowIndex = i;
                break;
            }
        }

        if (dateRowIndex == -1) {
            throw "Date row wasn't found!";
        }

        rolesValues = sheet.getRange(dateRowIndex + 2, toastmasterColumnIndex, 1, sheet.getLastColumn()).getValues()[0];
    }

    var roles = [];

    for (var i = 0; i < headerValues.length; i++) {
        var role = headerValues[i];

        if (role &&
            role.indexOf(MEETING_ROLE_SPEACH_PROJECT) == -1 &&
            role.indexOf(MEETING_ROLE_SPEACH_TITLE) == -1 &&
            role.indexOf(MEETING_ABOUT) == -1 &&
            role.indexOf(MEETING_THEME) == -1 &&
            role.indexOf(MEETING_WORD_OF_THE_DAY) == -1) {
            if (rolesValues.length == 0 || !rolesValues[i] || (showCanceledRoles && rolesValues[i][0] == MEETING_CANCEL_SYMBOL)) {
                var role = role.replace(" ‚Ññ1", "").replace(" ‚Ññ2", "").replace(" ‚Ññ3", "").replace(" ‚Ññ4", "");
                if (roles.indexOf(role) == -1) {
                    roles.push(role);
                }
            }
        }
    }

    return roles;
}

function getAvailableRoleDates(role, showCanceledRoles) {

    var sheet = SpreadsheetApp.openById(databaseSpreadSheetId).getSheetByName(SHEET_MEETINGS);

    var headerValues = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    var dateColumnIndex = headerValues.findIndex(MEETING_HEADER_DATE) + 1;
    headerValues = sheet.getRange(1, dateColumnIndex, 1, sheet.getLastColumn()).getValues()[0];
    var nextMeetingDate = getNextMeetingDate();
    var values = sheet.getRange(2, dateColumnIndex, sheet.getLastRow(), sheet.getLastColumn()).getValues();

    if (sheet.getLastRow() > SIGN_UP_FOR_NEXT_MEETINGS_AMOUNT) {
        var dateToCheck = sheet.getRange((sheet.getLastRow() + 1) - SIGN_UP_FOR_NEXT_MEETINGS_AMOUNT, dateColumnIndex).getValue();
        dateToCheck = new Date(dateToCheck.getTime() + ((MEETING_TIME * 60 + MEETING_DURATION_MINUTES) * 60000));

        if (dateToCheck - nextMeetingDate != 0) {
            getNextMeetingDates(SIGN_UP_FOR_NEXT_MEETINGS_AMOUNT);
        }
    } else {
        getNextMeetingDates(SIGN_UP_FOR_NEXT_MEETINGS_AMOUNT);
    }

    var availableDates = [];

    var roleSpeachHeaderIndexes = [];

    for (var i = 0; i < headerValues.length; i++) {
        if (headerValues[i].indexOf(role) > -1) {
            roleSpeachHeaderIndexes.push(i);
        }
    }

    if (!roleSpeachHeaderIndexes.length) {
        return;
    }

    for (var i = values.length - 1; i >= 0; i--) {
        if (!values[i][0]) continue;

        var date = parseDate(values[i][0]);
        date = new Date(date.getTime() + ((MEETING_TIME * 60 + MEETING_DURATION_MINUTES) * 60000));

        if (date >= nextMeetingDate) {
            for (var j = 0; j < roleSpeachHeaderIndexes.length; j++) {
                var roleSpeachIndex = roleSpeachHeaderIndexes[j];

                if (!values[i][roleSpeachIndex] || values[i][roleSpeachIndex] && (showCanceledRoles && values[i][roleSpeachIndex][0] == MEETING_CANCEL_SYMBOL)) {
                    availableDates.unshift(formatDate(date));
                    break;
                }
            }
        } else {
            break;
        }
    }

    return availableDates;
}

function getMeetingInfo(date, header) {
    var roles = getMeetingProgramRoles(parseDate(date));
    var about = '';
    for (var i = 0; i < roles.length; i++) {
        var role = roles[i];
        if (role.name == header) {
            return role.member;
        }
    }
}

function getNextMeetingDates(amount) {

    var sheet = SpreadsheetApp.openById(databaseSpreadSheetId).getSheetByName(SHEET_MEETINGS);

    var headerValues = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    var dateColumnIndex = headerValues.findIndex(MEETING_HEADER_DATE) + 1;

    var lastDate = parseDate(sheet.getRange(sheet.getLastRow(), dateColumnIndex).getValue());
    lastDate = new Date(lastDate.getTime() + ((MEETING_TIME * 60 + MEETING_DURATION_MINUTES) * 60000));
    var nextMeetingDate = getNextMeetingDate();

    var meetings = []
    var meetingsToInsert = [];

    meetings.push(formatDate(nextMeetingDate));

    for (var i = 0; i < amount - 1; i++) {
        var date = nextMeetingDate.addDays((i + 1) * 7);
        meetings.push(formatDate(date));

        if (date > lastDate) {
            meetingsToInsert.push([formatDate(date)]);
        }
    }

    if (meetingsToInsert.length) {
        sheet.insertRowsAfter(sheet.getLastRow(), meetingsToInsert.length);
        sheet.getRange(sheet.getLastRow() + 1, dateColumnIndex, meetingsToInsert.length, 1).setValues(meetingsToInsert);
    }

    return meetings;
}

function isRoleDuplicated(fullName, meetingDate, role) {
    var sheet = SpreadsheetApp.openById(databaseSpreadSheetId).getSheetByName(SHEET_MEETINGS);
    var headerValues = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    var dateColumnIndex = headerValues.findIndex(MEETING_HEADER_DATE) + 1;
    var lastRow = sheet.getLastRow() - 1;
    var values = sheet.getRange(2, dateColumnIndex, lastRow, sheet.getLastColumn()).getValues();
    var roleColumnIndexes = [];
    var meetingRowIndex = 0;

    var meetingDateFormatted = formatDate(parseDate(meetingDate));
    for (var i = values.length - 1; i >= 0; i--) {
        if (formatDate(parseDate(values[i][0])) == meetingDateFormatted) {
            meetingRowIndex = lastRow - (values.length - i);
            break;
        }
    }

    for (var i = 0; i < headerValues.length; i++) {
        if (headerValues[i].indexOf(role) > -1) {
            roleColumnIndexes.push(i - dateColumnIndex + 1);
        }
    }

    if (!meetingRowIndex || !roleColumnIndexes.length) {
        return null;
    }

    for (var i = 0; i < roleColumnIndexes.length; i++) {
        for (var j = 1; j <= +MEETINGS_AMOUNT_WHERE_ROLE_NOT_DUPLICATES; j++) {
            if (meetingRowIndex - j >= 0 && values[meetingRowIndex - j][roleColumnIndexes[i]].indexOf(fullName) > -1) {
                var nextAvailableDate = formatDate(parseDate(meetingDate).addDays((MEETINGS_AMOUNT_WHERE_ROLE_NOT_DUPLICATES - j + 1) * 7));
                var duplicate = {
                    date: formatDate(parseDate(values[meetingRowIndex - j][0])),
                    availableDate: nextAvailableDate,
                    isFuture: false
                };
                return duplicate;
            } else if (meetingRowIndex + j < values.length && values[meetingRowIndex + j][roleColumnIndexes[i]].indexOf(fullName) > -1) {
                var nextAvailableDate = formatDate(parseDate(values[meetingRowIndex + j][0]).addDays((MEETINGS_AMOUNT_WHERE_ROLE_NOT_DUPLICATES + 1) * 7));
                var duplicate = {
                    date: formatDate(parseDate(values[meetingRowIndex + j][0])),
                    availableDate: nextAvailableDate,
                    isFuture: true
                };
                return duplicate;
            }
        }
    }

    return false;
}

function isEnoughAmountOfSpeeches(fullName, role, meetingDate) {
    var sheet = SpreadsheetApp.openById(databaseSpreadSheetId).getSheetByName(SHEET_MEETINGS);
    var headerValues = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    var dateColumnIndex = headerValues.findIndex(MEETING_HEADER_DATE);
    var lastRow = sheet.getLastRow() - 1;
    var values = sheet.getRange(2, 1, lastRow, sheet.getLastColumn()).getValues();

    var sufficientAmount = (role == MEETING_ROLE_EVALUATION || role == MEETING_ROLE_TABLE_TOPIC_EVALUATOR) ? MINIMUM_SPEECHES_FOR_EVALUATION :
        (role == MEETING_ROLE_TOASTMASTER) ? MINIMUM_SPEECHES_FOR_TOASTMASTER :
        (role == MEETING_ROLE_TABLE_TOPIC_MASTER) ? MINIMUM_SPEECHES_FOR_TABLE_TOPIC : 0;
    if (!sufficientAmount) {
        return true;
    }

    var speechColumnIndexes = [];

    for (var i = 0; i < headerValues.length; i++) {
        if (headerValues[i].indexOf(MEETING_ROLE_SPEACH) > -1) {
            speechColumnIndexes.push(i + 1);
        }
    }

    var speechesMade = 0;

    for (var i = 0; i < speechColumnIndexes.length; i++) {
        for (var j = 0; j < values.length; j++) {
            if (!(parseDate(meetingDate) - parseDate(values[j][dateColumnIndex]))) {
                break;
            }
            if (values[j][speechColumnIndexes[i] - 1].indexOf(fullName) > -1) {
                speechesMade++;
            }
            if (speechesMade == sufficientAmount) {
                return true;
            }
        }
    }
    return false;
}